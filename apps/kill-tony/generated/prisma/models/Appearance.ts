
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Appearance` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/wasm-compiler-edge"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Appearance
 * 
 */
export type AppearanceModel = runtime.Types.Result.DefaultSelection<Prisma.$AppearancePayload>

export type AggregateAppearance = {
  _count: AppearanceCountAggregateOutputType | null
  _min: AppearanceMinAggregateOutputType | null
  _max: AppearanceMaxAggregateOutputType | null
}

export type AppearanceMinAggregateOutputType = {
  id: string | null
  name: string | null
  imageUrl: string | null
  isGuest: boolean | null
  isBucketPull: boolean | null
  isRegular: boolean | null
  isHallOfFame: boolean | null
  isGoldenTicketWinner: boolean | null
}

export type AppearanceMaxAggregateOutputType = {
  id: string | null
  name: string | null
  imageUrl: string | null
  isGuest: boolean | null
  isBucketPull: boolean | null
  isRegular: boolean | null
  isHallOfFame: boolean | null
  isGoldenTicketWinner: boolean | null
}

export type AppearanceCountAggregateOutputType = {
  id: number
  name: number
  imageUrl: number
  isGuest: number
  isBucketPull: number
  isRegular: number
  isHallOfFame: number
  isGoldenTicketWinner: number
  _all: number
}


export type AppearanceMinAggregateInputType = {
  id?: true
  name?: true
  imageUrl?: true
  isGuest?: true
  isBucketPull?: true
  isRegular?: true
  isHallOfFame?: true
  isGoldenTicketWinner?: true
}

export type AppearanceMaxAggregateInputType = {
  id?: true
  name?: true
  imageUrl?: true
  isGuest?: true
  isBucketPull?: true
  isRegular?: true
  isHallOfFame?: true
  isGoldenTicketWinner?: true
}

export type AppearanceCountAggregateInputType = {
  id?: true
  name?: true
  imageUrl?: true
  isGuest?: true
  isBucketPull?: true
  isRegular?: true
  isHallOfFame?: true
  isGoldenTicketWinner?: true
  _all?: true
}

export type AppearanceAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Appearance to aggregate.
   */
  where?: Prisma.AppearanceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Appearances to fetch.
   */
  orderBy?: Prisma.AppearanceOrderByWithRelationInput | Prisma.AppearanceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.AppearanceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Appearances from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Appearances.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Appearances
  **/
  _count?: true | AppearanceCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: AppearanceMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: AppearanceMaxAggregateInputType
}

export type GetAppearanceAggregateType<T extends AppearanceAggregateArgs> = {
      [P in keyof T & keyof AggregateAppearance]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAppearance[P]>
    : Prisma.GetScalarType<T[P], AggregateAppearance[P]>
}




export type AppearanceGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AppearanceWhereInput
  orderBy?: Prisma.AppearanceOrderByWithAggregationInput | Prisma.AppearanceOrderByWithAggregationInput[]
  by: Prisma.AppearanceScalarFieldEnum[] | Prisma.AppearanceScalarFieldEnum
  having?: Prisma.AppearanceScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: AppearanceCountAggregateInputType | true
  _min?: AppearanceMinAggregateInputType
  _max?: AppearanceMaxAggregateInputType
}

export type AppearanceGroupByOutputType = {
  id: string
  name: string
  imageUrl: string
  isGuest: boolean
  isBucketPull: boolean
  isRegular: boolean
  isHallOfFame: boolean
  isGoldenTicketWinner: boolean
  _count: AppearanceCountAggregateOutputType | null
  _min: AppearanceMinAggregateOutputType | null
  _max: AppearanceMaxAggregateOutputType | null
}

type GetAppearanceGroupByPayload<T extends AppearanceGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AppearanceGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof AppearanceGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AppearanceGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AppearanceGroupByOutputType[P]>
      }
    >
  > 



export type AppearanceWhereInput = {
  AND?: Prisma.AppearanceWhereInput | Prisma.AppearanceWhereInput[]
  OR?: Prisma.AppearanceWhereInput[]
  NOT?: Prisma.AppearanceWhereInput | Prisma.AppearanceWhereInput[]
  id?: Prisma.StringFilter<"Appearance"> | string
  name?: Prisma.StringFilter<"Appearance"> | string
  imageUrl?: Prisma.StringFilter<"Appearance"> | string
  isGuest?: Prisma.BoolFilter<"Appearance"> | boolean
  isBucketPull?: Prisma.BoolFilter<"Appearance"> | boolean
  isRegular?: Prisma.BoolFilter<"Appearance"> | boolean
  isHallOfFame?: Prisma.BoolFilter<"Appearance"> | boolean
  isGoldenTicketWinner?: Prisma.BoolFilter<"Appearance"> | boolean
  episodes?: Prisma.EpisodeListRelationFilter
}

export type AppearanceOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  imageUrl?: Prisma.SortOrder
  isGuest?: Prisma.SortOrder
  isBucketPull?: Prisma.SortOrder
  isRegular?: Prisma.SortOrder
  isHallOfFame?: Prisma.SortOrder
  isGoldenTicketWinner?: Prisma.SortOrder
  episodes?: Prisma.EpisodeOrderByRelationAggregateInput
}

export type AppearanceWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  name?: string
  AND?: Prisma.AppearanceWhereInput | Prisma.AppearanceWhereInput[]
  OR?: Prisma.AppearanceWhereInput[]
  NOT?: Prisma.AppearanceWhereInput | Prisma.AppearanceWhereInput[]
  imageUrl?: Prisma.StringFilter<"Appearance"> | string
  isGuest?: Prisma.BoolFilter<"Appearance"> | boolean
  isBucketPull?: Prisma.BoolFilter<"Appearance"> | boolean
  isRegular?: Prisma.BoolFilter<"Appearance"> | boolean
  isHallOfFame?: Prisma.BoolFilter<"Appearance"> | boolean
  isGoldenTicketWinner?: Prisma.BoolFilter<"Appearance"> | boolean
  episodes?: Prisma.EpisodeListRelationFilter
}, "id" | "name">

export type AppearanceOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  imageUrl?: Prisma.SortOrder
  isGuest?: Prisma.SortOrder
  isBucketPull?: Prisma.SortOrder
  isRegular?: Prisma.SortOrder
  isHallOfFame?: Prisma.SortOrder
  isGoldenTicketWinner?: Prisma.SortOrder
  _count?: Prisma.AppearanceCountOrderByAggregateInput
  _max?: Prisma.AppearanceMaxOrderByAggregateInput
  _min?: Prisma.AppearanceMinOrderByAggregateInput
}

export type AppearanceScalarWhereWithAggregatesInput = {
  AND?: Prisma.AppearanceScalarWhereWithAggregatesInput | Prisma.AppearanceScalarWhereWithAggregatesInput[]
  OR?: Prisma.AppearanceScalarWhereWithAggregatesInput[]
  NOT?: Prisma.AppearanceScalarWhereWithAggregatesInput | Prisma.AppearanceScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Appearance"> | string
  name?: Prisma.StringWithAggregatesFilter<"Appearance"> | string
  imageUrl?: Prisma.StringWithAggregatesFilter<"Appearance"> | string
  isGuest?: Prisma.BoolWithAggregatesFilter<"Appearance"> | boolean
  isBucketPull?: Prisma.BoolWithAggregatesFilter<"Appearance"> | boolean
  isRegular?: Prisma.BoolWithAggregatesFilter<"Appearance"> | boolean
  isHallOfFame?: Prisma.BoolWithAggregatesFilter<"Appearance"> | boolean
  isGoldenTicketWinner?: Prisma.BoolWithAggregatesFilter<"Appearance"> | boolean
}

export type AppearanceCreateInput = {
  id?: string
  name: string
  imageUrl: string
  isGuest?: boolean
  isBucketPull?: boolean
  isRegular?: boolean
  isHallOfFame?: boolean
  isGoldenTicketWinner?: boolean
  episodes?: Prisma.EpisodeCreateNestedManyWithoutAppearancesInput
}

export type AppearanceUncheckedCreateInput = {
  id?: string
  name: string
  imageUrl: string
  isGuest?: boolean
  isBucketPull?: boolean
  isRegular?: boolean
  isHallOfFame?: boolean
  isGoldenTicketWinner?: boolean
  episodes?: Prisma.EpisodeUncheckedCreateNestedManyWithoutAppearancesInput
}

export type AppearanceUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  imageUrl?: Prisma.StringFieldUpdateOperationsInput | string
  isGuest?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isBucketPull?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isRegular?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isHallOfFame?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isGoldenTicketWinner?: Prisma.BoolFieldUpdateOperationsInput | boolean
  episodes?: Prisma.EpisodeUpdateManyWithoutAppearancesNestedInput
}

export type AppearanceUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  imageUrl?: Prisma.StringFieldUpdateOperationsInput | string
  isGuest?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isBucketPull?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isRegular?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isHallOfFame?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isGoldenTicketWinner?: Prisma.BoolFieldUpdateOperationsInput | boolean
  episodes?: Prisma.EpisodeUncheckedUpdateManyWithoutAppearancesNestedInput
}

export type AppearanceCreateManyInput = {
  id?: string
  name: string
  imageUrl: string
  isGuest?: boolean
  isBucketPull?: boolean
  isRegular?: boolean
  isHallOfFame?: boolean
  isGoldenTicketWinner?: boolean
}

export type AppearanceUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  imageUrl?: Prisma.StringFieldUpdateOperationsInput | string
  isGuest?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isBucketPull?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isRegular?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isHallOfFame?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isGoldenTicketWinner?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type AppearanceUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  imageUrl?: Prisma.StringFieldUpdateOperationsInput | string
  isGuest?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isBucketPull?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isRegular?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isHallOfFame?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isGoldenTicketWinner?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type AppearanceListRelationFilter = {
  every?: Prisma.AppearanceWhereInput
  some?: Prisma.AppearanceWhereInput
  none?: Prisma.AppearanceWhereInput
}

export type AppearanceOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type AppearanceCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  imageUrl?: Prisma.SortOrder
  isGuest?: Prisma.SortOrder
  isBucketPull?: Prisma.SortOrder
  isRegular?: Prisma.SortOrder
  isHallOfFame?: Prisma.SortOrder
  isGoldenTicketWinner?: Prisma.SortOrder
}

export type AppearanceMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  imageUrl?: Prisma.SortOrder
  isGuest?: Prisma.SortOrder
  isBucketPull?: Prisma.SortOrder
  isRegular?: Prisma.SortOrder
  isHallOfFame?: Prisma.SortOrder
  isGoldenTicketWinner?: Prisma.SortOrder
}

export type AppearanceMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  imageUrl?: Prisma.SortOrder
  isGuest?: Prisma.SortOrder
  isBucketPull?: Prisma.SortOrder
  isRegular?: Prisma.SortOrder
  isHallOfFame?: Prisma.SortOrder
  isGoldenTicketWinner?: Prisma.SortOrder
}

export type AppearanceCreateNestedManyWithoutEpisodesInput = {
  create?: Prisma.XOR<Prisma.AppearanceCreateWithoutEpisodesInput, Prisma.AppearanceUncheckedCreateWithoutEpisodesInput> | Prisma.AppearanceCreateWithoutEpisodesInput[] | Prisma.AppearanceUncheckedCreateWithoutEpisodesInput[]
  connectOrCreate?: Prisma.AppearanceCreateOrConnectWithoutEpisodesInput | Prisma.AppearanceCreateOrConnectWithoutEpisodesInput[]
  connect?: Prisma.AppearanceWhereUniqueInput | Prisma.AppearanceWhereUniqueInput[]
}

export type AppearanceUncheckedCreateNestedManyWithoutEpisodesInput = {
  create?: Prisma.XOR<Prisma.AppearanceCreateWithoutEpisodesInput, Prisma.AppearanceUncheckedCreateWithoutEpisodesInput> | Prisma.AppearanceCreateWithoutEpisodesInput[] | Prisma.AppearanceUncheckedCreateWithoutEpisodesInput[]
  connectOrCreate?: Prisma.AppearanceCreateOrConnectWithoutEpisodesInput | Prisma.AppearanceCreateOrConnectWithoutEpisodesInput[]
  connect?: Prisma.AppearanceWhereUniqueInput | Prisma.AppearanceWhereUniqueInput[]
}

export type AppearanceUpdateManyWithoutEpisodesNestedInput = {
  create?: Prisma.XOR<Prisma.AppearanceCreateWithoutEpisodesInput, Prisma.AppearanceUncheckedCreateWithoutEpisodesInput> | Prisma.AppearanceCreateWithoutEpisodesInput[] | Prisma.AppearanceUncheckedCreateWithoutEpisodesInput[]
  connectOrCreate?: Prisma.AppearanceCreateOrConnectWithoutEpisodesInput | Prisma.AppearanceCreateOrConnectWithoutEpisodesInput[]
  upsert?: Prisma.AppearanceUpsertWithWhereUniqueWithoutEpisodesInput | Prisma.AppearanceUpsertWithWhereUniqueWithoutEpisodesInput[]
  set?: Prisma.AppearanceWhereUniqueInput | Prisma.AppearanceWhereUniqueInput[]
  disconnect?: Prisma.AppearanceWhereUniqueInput | Prisma.AppearanceWhereUniqueInput[]
  delete?: Prisma.AppearanceWhereUniqueInput | Prisma.AppearanceWhereUniqueInput[]
  connect?: Prisma.AppearanceWhereUniqueInput | Prisma.AppearanceWhereUniqueInput[]
  update?: Prisma.AppearanceUpdateWithWhereUniqueWithoutEpisodesInput | Prisma.AppearanceUpdateWithWhereUniqueWithoutEpisodesInput[]
  updateMany?: Prisma.AppearanceUpdateManyWithWhereWithoutEpisodesInput | Prisma.AppearanceUpdateManyWithWhereWithoutEpisodesInput[]
  deleteMany?: Prisma.AppearanceScalarWhereInput | Prisma.AppearanceScalarWhereInput[]
}

export type AppearanceUncheckedUpdateManyWithoutEpisodesNestedInput = {
  create?: Prisma.XOR<Prisma.AppearanceCreateWithoutEpisodesInput, Prisma.AppearanceUncheckedCreateWithoutEpisodesInput> | Prisma.AppearanceCreateWithoutEpisodesInput[] | Prisma.AppearanceUncheckedCreateWithoutEpisodesInput[]
  connectOrCreate?: Prisma.AppearanceCreateOrConnectWithoutEpisodesInput | Prisma.AppearanceCreateOrConnectWithoutEpisodesInput[]
  upsert?: Prisma.AppearanceUpsertWithWhereUniqueWithoutEpisodesInput | Prisma.AppearanceUpsertWithWhereUniqueWithoutEpisodesInput[]
  set?: Prisma.AppearanceWhereUniqueInput | Prisma.AppearanceWhereUniqueInput[]
  disconnect?: Prisma.AppearanceWhereUniqueInput | Prisma.AppearanceWhereUniqueInput[]
  delete?: Prisma.AppearanceWhereUniqueInput | Prisma.AppearanceWhereUniqueInput[]
  connect?: Prisma.AppearanceWhereUniqueInput | Prisma.AppearanceWhereUniqueInput[]
  update?: Prisma.AppearanceUpdateWithWhereUniqueWithoutEpisodesInput | Prisma.AppearanceUpdateWithWhereUniqueWithoutEpisodesInput[]
  updateMany?: Prisma.AppearanceUpdateManyWithWhereWithoutEpisodesInput | Prisma.AppearanceUpdateManyWithWhereWithoutEpisodesInput[]
  deleteMany?: Prisma.AppearanceScalarWhereInput | Prisma.AppearanceScalarWhereInput[]
}

export type BoolFieldUpdateOperationsInput = {
  set?: boolean
}

export type AppearanceCreateWithoutEpisodesInput = {
  id?: string
  name: string
  imageUrl: string
  isGuest?: boolean
  isBucketPull?: boolean
  isRegular?: boolean
  isHallOfFame?: boolean
  isGoldenTicketWinner?: boolean
}

export type AppearanceUncheckedCreateWithoutEpisodesInput = {
  id?: string
  name: string
  imageUrl: string
  isGuest?: boolean
  isBucketPull?: boolean
  isRegular?: boolean
  isHallOfFame?: boolean
  isGoldenTicketWinner?: boolean
}

export type AppearanceCreateOrConnectWithoutEpisodesInput = {
  where: Prisma.AppearanceWhereUniqueInput
  create: Prisma.XOR<Prisma.AppearanceCreateWithoutEpisodesInput, Prisma.AppearanceUncheckedCreateWithoutEpisodesInput>
}

export type AppearanceUpsertWithWhereUniqueWithoutEpisodesInput = {
  where: Prisma.AppearanceWhereUniqueInput
  update: Prisma.XOR<Prisma.AppearanceUpdateWithoutEpisodesInput, Prisma.AppearanceUncheckedUpdateWithoutEpisodesInput>
  create: Prisma.XOR<Prisma.AppearanceCreateWithoutEpisodesInput, Prisma.AppearanceUncheckedCreateWithoutEpisodesInput>
}

export type AppearanceUpdateWithWhereUniqueWithoutEpisodesInput = {
  where: Prisma.AppearanceWhereUniqueInput
  data: Prisma.XOR<Prisma.AppearanceUpdateWithoutEpisodesInput, Prisma.AppearanceUncheckedUpdateWithoutEpisodesInput>
}

export type AppearanceUpdateManyWithWhereWithoutEpisodesInput = {
  where: Prisma.AppearanceScalarWhereInput
  data: Prisma.XOR<Prisma.AppearanceUpdateManyMutationInput, Prisma.AppearanceUncheckedUpdateManyWithoutEpisodesInput>
}

export type AppearanceScalarWhereInput = {
  AND?: Prisma.AppearanceScalarWhereInput | Prisma.AppearanceScalarWhereInput[]
  OR?: Prisma.AppearanceScalarWhereInput[]
  NOT?: Prisma.AppearanceScalarWhereInput | Prisma.AppearanceScalarWhereInput[]
  id?: Prisma.StringFilter<"Appearance"> | string
  name?: Prisma.StringFilter<"Appearance"> | string
  imageUrl?: Prisma.StringFilter<"Appearance"> | string
  isGuest?: Prisma.BoolFilter<"Appearance"> | boolean
  isBucketPull?: Prisma.BoolFilter<"Appearance"> | boolean
  isRegular?: Prisma.BoolFilter<"Appearance"> | boolean
  isHallOfFame?: Prisma.BoolFilter<"Appearance"> | boolean
  isGoldenTicketWinner?: Prisma.BoolFilter<"Appearance"> | boolean
}

export type AppearanceUpdateWithoutEpisodesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  imageUrl?: Prisma.StringFieldUpdateOperationsInput | string
  isGuest?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isBucketPull?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isRegular?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isHallOfFame?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isGoldenTicketWinner?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type AppearanceUncheckedUpdateWithoutEpisodesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  imageUrl?: Prisma.StringFieldUpdateOperationsInput | string
  isGuest?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isBucketPull?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isRegular?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isHallOfFame?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isGoldenTicketWinner?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type AppearanceUncheckedUpdateManyWithoutEpisodesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  imageUrl?: Prisma.StringFieldUpdateOperationsInput | string
  isGuest?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isBucketPull?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isRegular?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isHallOfFame?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isGoldenTicketWinner?: Prisma.BoolFieldUpdateOperationsInput | boolean
}


/**
 * Count Type AppearanceCountOutputType
 */

export type AppearanceCountOutputType = {
  episodes: number
}

export type AppearanceCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  episodes?: boolean | AppearanceCountOutputTypeCountEpisodesArgs
}

/**
 * AppearanceCountOutputType without action
 */
export type AppearanceCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AppearanceCountOutputType
   */
  select?: Prisma.AppearanceCountOutputTypeSelect<ExtArgs> | null
}

/**
 * AppearanceCountOutputType without action
 */
export type AppearanceCountOutputTypeCountEpisodesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.EpisodeWhereInput
}


export type AppearanceSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  imageUrl?: boolean
  isGuest?: boolean
  isBucketPull?: boolean
  isRegular?: boolean
  isHallOfFame?: boolean
  isGoldenTicketWinner?: boolean
  episodes?: boolean | Prisma.Appearance$episodesArgs<ExtArgs>
  _count?: boolean | Prisma.AppearanceCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["appearance"]>

export type AppearanceSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  imageUrl?: boolean
  isGuest?: boolean
  isBucketPull?: boolean
  isRegular?: boolean
  isHallOfFame?: boolean
  isGoldenTicketWinner?: boolean
}, ExtArgs["result"]["appearance"]>

export type AppearanceSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  imageUrl?: boolean
  isGuest?: boolean
  isBucketPull?: boolean
  isRegular?: boolean
  isHallOfFame?: boolean
  isGoldenTicketWinner?: boolean
}, ExtArgs["result"]["appearance"]>

export type AppearanceSelectScalar = {
  id?: boolean
  name?: boolean
  imageUrl?: boolean
  isGuest?: boolean
  isBucketPull?: boolean
  isRegular?: boolean
  isHallOfFame?: boolean
  isGoldenTicketWinner?: boolean
}

export type AppearanceOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "imageUrl" | "isGuest" | "isBucketPull" | "isRegular" | "isHallOfFame" | "isGoldenTicketWinner", ExtArgs["result"]["appearance"]>
export type AppearanceInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  episodes?: boolean | Prisma.Appearance$episodesArgs<ExtArgs>
  _count?: boolean | Prisma.AppearanceCountOutputTypeDefaultArgs<ExtArgs>
}
export type AppearanceIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type AppearanceIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $AppearancePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Appearance"
  objects: {
    episodes: Prisma.$EpisodePayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    imageUrl: string
    isGuest: boolean
    isBucketPull: boolean
    isRegular: boolean
    isHallOfFame: boolean
    isGoldenTicketWinner: boolean
  }, ExtArgs["result"]["appearance"]>
  composites: {}
}

export type AppearanceGetPayload<S extends boolean | null | undefined | AppearanceDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$AppearancePayload, S>

export type AppearanceCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<AppearanceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: AppearanceCountAggregateInputType | true
  }

export interface AppearanceDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Appearance'], meta: { name: 'Appearance' } }
  /**
   * Find zero or one Appearance that matches the filter.
   * @param {AppearanceFindUniqueArgs} args - Arguments to find a Appearance
   * @example
   * // Get one Appearance
   * const appearance = await prisma.appearance.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AppearanceFindUniqueArgs>(args: Prisma.SelectSubset<T, AppearanceFindUniqueArgs<ExtArgs>>): Prisma.Prisma__AppearanceClient<runtime.Types.Result.GetResult<Prisma.$AppearancePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Appearance that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AppearanceFindUniqueOrThrowArgs} args - Arguments to find a Appearance
   * @example
   * // Get one Appearance
   * const appearance = await prisma.appearance.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AppearanceFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, AppearanceFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__AppearanceClient<runtime.Types.Result.GetResult<Prisma.$AppearancePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Appearance that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AppearanceFindFirstArgs} args - Arguments to find a Appearance
   * @example
   * // Get one Appearance
   * const appearance = await prisma.appearance.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AppearanceFindFirstArgs>(args?: Prisma.SelectSubset<T, AppearanceFindFirstArgs<ExtArgs>>): Prisma.Prisma__AppearanceClient<runtime.Types.Result.GetResult<Prisma.$AppearancePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Appearance that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AppearanceFindFirstOrThrowArgs} args - Arguments to find a Appearance
   * @example
   * // Get one Appearance
   * const appearance = await prisma.appearance.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AppearanceFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, AppearanceFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__AppearanceClient<runtime.Types.Result.GetResult<Prisma.$AppearancePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Appearances that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AppearanceFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Appearances
   * const appearances = await prisma.appearance.findMany()
   * 
   * // Get first 10 Appearances
   * const appearances = await prisma.appearance.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const appearanceWithIdOnly = await prisma.appearance.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends AppearanceFindManyArgs>(args?: Prisma.SelectSubset<T, AppearanceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AppearancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Appearance.
   * @param {AppearanceCreateArgs} args - Arguments to create a Appearance.
   * @example
   * // Create one Appearance
   * const Appearance = await prisma.appearance.create({
   *   data: {
   *     // ... data to create a Appearance
   *   }
   * })
   * 
   */
  create<T extends AppearanceCreateArgs>(args: Prisma.SelectSubset<T, AppearanceCreateArgs<ExtArgs>>): Prisma.Prisma__AppearanceClient<runtime.Types.Result.GetResult<Prisma.$AppearancePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Appearances.
   * @param {AppearanceCreateManyArgs} args - Arguments to create many Appearances.
   * @example
   * // Create many Appearances
   * const appearance = await prisma.appearance.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends AppearanceCreateManyArgs>(args?: Prisma.SelectSubset<T, AppearanceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Appearances and returns the data saved in the database.
   * @param {AppearanceCreateManyAndReturnArgs} args - Arguments to create many Appearances.
   * @example
   * // Create many Appearances
   * const appearance = await prisma.appearance.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Appearances and only return the `id`
   * const appearanceWithIdOnly = await prisma.appearance.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends AppearanceCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, AppearanceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AppearancePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Appearance.
   * @param {AppearanceDeleteArgs} args - Arguments to delete one Appearance.
   * @example
   * // Delete one Appearance
   * const Appearance = await prisma.appearance.delete({
   *   where: {
   *     // ... filter to delete one Appearance
   *   }
   * })
   * 
   */
  delete<T extends AppearanceDeleteArgs>(args: Prisma.SelectSubset<T, AppearanceDeleteArgs<ExtArgs>>): Prisma.Prisma__AppearanceClient<runtime.Types.Result.GetResult<Prisma.$AppearancePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Appearance.
   * @param {AppearanceUpdateArgs} args - Arguments to update one Appearance.
   * @example
   * // Update one Appearance
   * const appearance = await prisma.appearance.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends AppearanceUpdateArgs>(args: Prisma.SelectSubset<T, AppearanceUpdateArgs<ExtArgs>>): Prisma.Prisma__AppearanceClient<runtime.Types.Result.GetResult<Prisma.$AppearancePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Appearances.
   * @param {AppearanceDeleteManyArgs} args - Arguments to filter Appearances to delete.
   * @example
   * // Delete a few Appearances
   * const { count } = await prisma.appearance.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends AppearanceDeleteManyArgs>(args?: Prisma.SelectSubset<T, AppearanceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Appearances.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AppearanceUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Appearances
   * const appearance = await prisma.appearance.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends AppearanceUpdateManyArgs>(args: Prisma.SelectSubset<T, AppearanceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Appearances and returns the data updated in the database.
   * @param {AppearanceUpdateManyAndReturnArgs} args - Arguments to update many Appearances.
   * @example
   * // Update many Appearances
   * const appearance = await prisma.appearance.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Appearances and only return the `id`
   * const appearanceWithIdOnly = await prisma.appearance.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends AppearanceUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, AppearanceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AppearancePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Appearance.
   * @param {AppearanceUpsertArgs} args - Arguments to update or create a Appearance.
   * @example
   * // Update or create a Appearance
   * const appearance = await prisma.appearance.upsert({
   *   create: {
   *     // ... data to create a Appearance
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Appearance we want to update
   *   }
   * })
   */
  upsert<T extends AppearanceUpsertArgs>(args: Prisma.SelectSubset<T, AppearanceUpsertArgs<ExtArgs>>): Prisma.Prisma__AppearanceClient<runtime.Types.Result.GetResult<Prisma.$AppearancePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Appearances.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AppearanceCountArgs} args - Arguments to filter Appearances to count.
   * @example
   * // Count the number of Appearances
   * const count = await prisma.appearance.count({
   *   where: {
   *     // ... the filter for the Appearances we want to count
   *   }
   * })
  **/
  count<T extends AppearanceCountArgs>(
    args?: Prisma.Subset<T, AppearanceCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], AppearanceCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Appearance.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AppearanceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends AppearanceAggregateArgs>(args: Prisma.Subset<T, AppearanceAggregateArgs>): Prisma.PrismaPromise<GetAppearanceAggregateType<T>>

  /**
   * Group by Appearance.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AppearanceGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends AppearanceGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AppearanceGroupByArgs['orderBy'] }
      : { orderBy?: AppearanceGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, AppearanceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAppearanceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Appearance model
 */
readonly fields: AppearanceFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Appearance.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AppearanceClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  episodes<T extends Prisma.Appearance$episodesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Appearance$episodesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EpisodePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Appearance model
 */
export interface AppearanceFieldRefs {
  readonly id: Prisma.FieldRef<"Appearance", 'String'>
  readonly name: Prisma.FieldRef<"Appearance", 'String'>
  readonly imageUrl: Prisma.FieldRef<"Appearance", 'String'>
  readonly isGuest: Prisma.FieldRef<"Appearance", 'Boolean'>
  readonly isBucketPull: Prisma.FieldRef<"Appearance", 'Boolean'>
  readonly isRegular: Prisma.FieldRef<"Appearance", 'Boolean'>
  readonly isHallOfFame: Prisma.FieldRef<"Appearance", 'Boolean'>
  readonly isGoldenTicketWinner: Prisma.FieldRef<"Appearance", 'Boolean'>
}
    

// Custom InputTypes
/**
 * Appearance findUnique
 */
export type AppearanceFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Appearance
   */
  select?: Prisma.AppearanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Appearance
   */
  omit?: Prisma.AppearanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AppearanceInclude<ExtArgs> | null
  /**
   * Filter, which Appearance to fetch.
   */
  where: Prisma.AppearanceWhereUniqueInput
}

/**
 * Appearance findUniqueOrThrow
 */
export type AppearanceFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Appearance
   */
  select?: Prisma.AppearanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Appearance
   */
  omit?: Prisma.AppearanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AppearanceInclude<ExtArgs> | null
  /**
   * Filter, which Appearance to fetch.
   */
  where: Prisma.AppearanceWhereUniqueInput
}

/**
 * Appearance findFirst
 */
export type AppearanceFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Appearance
   */
  select?: Prisma.AppearanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Appearance
   */
  omit?: Prisma.AppearanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AppearanceInclude<ExtArgs> | null
  /**
   * Filter, which Appearance to fetch.
   */
  where?: Prisma.AppearanceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Appearances to fetch.
   */
  orderBy?: Prisma.AppearanceOrderByWithRelationInput | Prisma.AppearanceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Appearances.
   */
  cursor?: Prisma.AppearanceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Appearances from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Appearances.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Appearances.
   */
  distinct?: Prisma.AppearanceScalarFieldEnum | Prisma.AppearanceScalarFieldEnum[]
}

/**
 * Appearance findFirstOrThrow
 */
export type AppearanceFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Appearance
   */
  select?: Prisma.AppearanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Appearance
   */
  omit?: Prisma.AppearanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AppearanceInclude<ExtArgs> | null
  /**
   * Filter, which Appearance to fetch.
   */
  where?: Prisma.AppearanceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Appearances to fetch.
   */
  orderBy?: Prisma.AppearanceOrderByWithRelationInput | Prisma.AppearanceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Appearances.
   */
  cursor?: Prisma.AppearanceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Appearances from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Appearances.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Appearances.
   */
  distinct?: Prisma.AppearanceScalarFieldEnum | Prisma.AppearanceScalarFieldEnum[]
}

/**
 * Appearance findMany
 */
export type AppearanceFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Appearance
   */
  select?: Prisma.AppearanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Appearance
   */
  omit?: Prisma.AppearanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AppearanceInclude<ExtArgs> | null
  /**
   * Filter, which Appearances to fetch.
   */
  where?: Prisma.AppearanceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Appearances to fetch.
   */
  orderBy?: Prisma.AppearanceOrderByWithRelationInput | Prisma.AppearanceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Appearances.
   */
  cursor?: Prisma.AppearanceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Appearances from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Appearances.
   */
  skip?: number
  distinct?: Prisma.AppearanceScalarFieldEnum | Prisma.AppearanceScalarFieldEnum[]
}

/**
 * Appearance create
 */
export type AppearanceCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Appearance
   */
  select?: Prisma.AppearanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Appearance
   */
  omit?: Prisma.AppearanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AppearanceInclude<ExtArgs> | null
  /**
   * The data needed to create a Appearance.
   */
  data: Prisma.XOR<Prisma.AppearanceCreateInput, Prisma.AppearanceUncheckedCreateInput>
}

/**
 * Appearance createMany
 */
export type AppearanceCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Appearances.
   */
  data: Prisma.AppearanceCreateManyInput | Prisma.AppearanceCreateManyInput[]
}

/**
 * Appearance createManyAndReturn
 */
export type AppearanceCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Appearance
   */
  select?: Prisma.AppearanceSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Appearance
   */
  omit?: Prisma.AppearanceOmit<ExtArgs> | null
  /**
   * The data used to create many Appearances.
   */
  data: Prisma.AppearanceCreateManyInput | Prisma.AppearanceCreateManyInput[]
}

/**
 * Appearance update
 */
export type AppearanceUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Appearance
   */
  select?: Prisma.AppearanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Appearance
   */
  omit?: Prisma.AppearanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AppearanceInclude<ExtArgs> | null
  /**
   * The data needed to update a Appearance.
   */
  data: Prisma.XOR<Prisma.AppearanceUpdateInput, Prisma.AppearanceUncheckedUpdateInput>
  /**
   * Choose, which Appearance to update.
   */
  where: Prisma.AppearanceWhereUniqueInput
}

/**
 * Appearance updateMany
 */
export type AppearanceUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Appearances.
   */
  data: Prisma.XOR<Prisma.AppearanceUpdateManyMutationInput, Prisma.AppearanceUncheckedUpdateManyInput>
  /**
   * Filter which Appearances to update
   */
  where?: Prisma.AppearanceWhereInput
  /**
   * Limit how many Appearances to update.
   */
  limit?: number
}

/**
 * Appearance updateManyAndReturn
 */
export type AppearanceUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Appearance
   */
  select?: Prisma.AppearanceSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Appearance
   */
  omit?: Prisma.AppearanceOmit<ExtArgs> | null
  /**
   * The data used to update Appearances.
   */
  data: Prisma.XOR<Prisma.AppearanceUpdateManyMutationInput, Prisma.AppearanceUncheckedUpdateManyInput>
  /**
   * Filter which Appearances to update
   */
  where?: Prisma.AppearanceWhereInput
  /**
   * Limit how many Appearances to update.
   */
  limit?: number
}

/**
 * Appearance upsert
 */
export type AppearanceUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Appearance
   */
  select?: Prisma.AppearanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Appearance
   */
  omit?: Prisma.AppearanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AppearanceInclude<ExtArgs> | null
  /**
   * The filter to search for the Appearance to update in case it exists.
   */
  where: Prisma.AppearanceWhereUniqueInput
  /**
   * In case the Appearance found by the `where` argument doesn't exist, create a new Appearance with this data.
   */
  create: Prisma.XOR<Prisma.AppearanceCreateInput, Prisma.AppearanceUncheckedCreateInput>
  /**
   * In case the Appearance was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.AppearanceUpdateInput, Prisma.AppearanceUncheckedUpdateInput>
}

/**
 * Appearance delete
 */
export type AppearanceDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Appearance
   */
  select?: Prisma.AppearanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Appearance
   */
  omit?: Prisma.AppearanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AppearanceInclude<ExtArgs> | null
  /**
   * Filter which Appearance to delete.
   */
  where: Prisma.AppearanceWhereUniqueInput
}

/**
 * Appearance deleteMany
 */
export type AppearanceDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Appearances to delete
   */
  where?: Prisma.AppearanceWhereInput
  /**
   * Limit how many Appearances to delete.
   */
  limit?: number
}

/**
 * Appearance.episodes
 */
export type Appearance$episodesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Episode
   */
  select?: Prisma.EpisodeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Episode
   */
  omit?: Prisma.EpisodeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EpisodeInclude<ExtArgs> | null
  where?: Prisma.EpisodeWhereInput
  orderBy?: Prisma.EpisodeOrderByWithRelationInput | Prisma.EpisodeOrderByWithRelationInput[]
  cursor?: Prisma.EpisodeWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.EpisodeScalarFieldEnum | Prisma.EpisodeScalarFieldEnum[]
}

/**
 * Appearance without action
 */
export type AppearanceDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Appearance
   */
  select?: Prisma.AppearanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Appearance
   */
  omit?: Prisma.AppearanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AppearanceInclude<ExtArgs> | null
}
