
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Tech` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/wasm-compiler-edge"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Tech
 * 
 */
export type TechModel = runtime.Types.Result.DefaultSelection<Prisma.$TechPayload>

export type AggregateTech = {
  _count: TechCountAggregateOutputType | null
  _min: TechMinAggregateOutputType | null
  _max: TechMaxAggregateOutputType | null
}

export type TechMinAggregateOutputType = {
  id: string | null
  name: string | null
}

export type TechMaxAggregateOutputType = {
  id: string | null
  name: string | null
}

export type TechCountAggregateOutputType = {
  id: number
  name: number
  _all: number
}


export type TechMinAggregateInputType = {
  id?: true
  name?: true
}

export type TechMaxAggregateInputType = {
  id?: true
  name?: true
}

export type TechCountAggregateInputType = {
  id?: true
  name?: true
  _all?: true
}

export type TechAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Tech to aggregate.
   */
  where?: Prisma.TechWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Teches to fetch.
   */
  orderBy?: Prisma.TechOrderByWithRelationInput | Prisma.TechOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.TechWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Teches from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Teches.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Teches
  **/
  _count?: true | TechCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: TechMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: TechMaxAggregateInputType
}

export type GetTechAggregateType<T extends TechAggregateArgs> = {
      [P in keyof T & keyof AggregateTech]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTech[P]>
    : Prisma.GetScalarType<T[P], AggregateTech[P]>
}




export type TechGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TechWhereInput
  orderBy?: Prisma.TechOrderByWithAggregationInput | Prisma.TechOrderByWithAggregationInput[]
  by: Prisma.TechScalarFieldEnum[] | Prisma.TechScalarFieldEnum
  having?: Prisma.TechScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TechCountAggregateInputType | true
  _min?: TechMinAggregateInputType
  _max?: TechMaxAggregateInputType
}

export type TechGroupByOutputType = {
  id: string
  name: string
  _count: TechCountAggregateOutputType | null
  _min: TechMinAggregateOutputType | null
  _max: TechMaxAggregateOutputType | null
}

type GetTechGroupByPayload<T extends TechGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TechGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof TechGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TechGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TechGroupByOutputType[P]>
      }
    >
  > 



export type TechWhereInput = {
  AND?: Prisma.TechWhereInput | Prisma.TechWhereInput[]
  OR?: Prisma.TechWhereInput[]
  NOT?: Prisma.TechWhereInput | Prisma.TechWhereInput[]
  id?: Prisma.StringFilter<"Tech"> | string
  name?: Prisma.StringFilter<"Tech"> | string
  projects?: Prisma.ProjectListRelationFilter
}

export type TechOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  projects?: Prisma.ProjectOrderByRelationAggregateInput
}

export type TechWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  name?: string
  AND?: Prisma.TechWhereInput | Prisma.TechWhereInput[]
  OR?: Prisma.TechWhereInput[]
  NOT?: Prisma.TechWhereInput | Prisma.TechWhereInput[]
  projects?: Prisma.ProjectListRelationFilter
}, "id" | "name">

export type TechOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  _count?: Prisma.TechCountOrderByAggregateInput
  _max?: Prisma.TechMaxOrderByAggregateInput
  _min?: Prisma.TechMinOrderByAggregateInput
}

export type TechScalarWhereWithAggregatesInput = {
  AND?: Prisma.TechScalarWhereWithAggregatesInput | Prisma.TechScalarWhereWithAggregatesInput[]
  OR?: Prisma.TechScalarWhereWithAggregatesInput[]
  NOT?: Prisma.TechScalarWhereWithAggregatesInput | Prisma.TechScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Tech"> | string
  name?: Prisma.StringWithAggregatesFilter<"Tech"> | string
}

export type TechCreateInput = {
  id?: string
  name: string
  projects?: Prisma.ProjectCreateNestedManyWithoutTechsInput
}

export type TechUncheckedCreateInput = {
  id?: string
  name: string
  projects?: Prisma.ProjectUncheckedCreateNestedManyWithoutTechsInput
}

export type TechUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  projects?: Prisma.ProjectUpdateManyWithoutTechsNestedInput
}

export type TechUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  projects?: Prisma.ProjectUncheckedUpdateManyWithoutTechsNestedInput
}

export type TechCreateManyInput = {
  id?: string
  name: string
}

export type TechUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TechUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TechListRelationFilter = {
  every?: Prisma.TechWhereInput
  some?: Prisma.TechWhereInput
  none?: Prisma.TechWhereInput
}

export type TechOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type TechCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
}

export type TechMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
}

export type TechMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
}

export type TechCreateNestedManyWithoutProjectsInput = {
  create?: Prisma.XOR<Prisma.TechCreateWithoutProjectsInput, Prisma.TechUncheckedCreateWithoutProjectsInput> | Prisma.TechCreateWithoutProjectsInput[] | Prisma.TechUncheckedCreateWithoutProjectsInput[]
  connectOrCreate?: Prisma.TechCreateOrConnectWithoutProjectsInput | Prisma.TechCreateOrConnectWithoutProjectsInput[]
  connect?: Prisma.TechWhereUniqueInput | Prisma.TechWhereUniqueInput[]
}

export type TechUncheckedCreateNestedManyWithoutProjectsInput = {
  create?: Prisma.XOR<Prisma.TechCreateWithoutProjectsInput, Prisma.TechUncheckedCreateWithoutProjectsInput> | Prisma.TechCreateWithoutProjectsInput[] | Prisma.TechUncheckedCreateWithoutProjectsInput[]
  connectOrCreate?: Prisma.TechCreateOrConnectWithoutProjectsInput | Prisma.TechCreateOrConnectWithoutProjectsInput[]
  connect?: Prisma.TechWhereUniqueInput | Prisma.TechWhereUniqueInput[]
}

export type TechUpdateManyWithoutProjectsNestedInput = {
  create?: Prisma.XOR<Prisma.TechCreateWithoutProjectsInput, Prisma.TechUncheckedCreateWithoutProjectsInput> | Prisma.TechCreateWithoutProjectsInput[] | Prisma.TechUncheckedCreateWithoutProjectsInput[]
  connectOrCreate?: Prisma.TechCreateOrConnectWithoutProjectsInput | Prisma.TechCreateOrConnectWithoutProjectsInput[]
  upsert?: Prisma.TechUpsertWithWhereUniqueWithoutProjectsInput | Prisma.TechUpsertWithWhereUniqueWithoutProjectsInput[]
  set?: Prisma.TechWhereUniqueInput | Prisma.TechWhereUniqueInput[]
  disconnect?: Prisma.TechWhereUniqueInput | Prisma.TechWhereUniqueInput[]
  delete?: Prisma.TechWhereUniqueInput | Prisma.TechWhereUniqueInput[]
  connect?: Prisma.TechWhereUniqueInput | Prisma.TechWhereUniqueInput[]
  update?: Prisma.TechUpdateWithWhereUniqueWithoutProjectsInput | Prisma.TechUpdateWithWhereUniqueWithoutProjectsInput[]
  updateMany?: Prisma.TechUpdateManyWithWhereWithoutProjectsInput | Prisma.TechUpdateManyWithWhereWithoutProjectsInput[]
  deleteMany?: Prisma.TechScalarWhereInput | Prisma.TechScalarWhereInput[]
}

export type TechUncheckedUpdateManyWithoutProjectsNestedInput = {
  create?: Prisma.XOR<Prisma.TechCreateWithoutProjectsInput, Prisma.TechUncheckedCreateWithoutProjectsInput> | Prisma.TechCreateWithoutProjectsInput[] | Prisma.TechUncheckedCreateWithoutProjectsInput[]
  connectOrCreate?: Prisma.TechCreateOrConnectWithoutProjectsInput | Prisma.TechCreateOrConnectWithoutProjectsInput[]
  upsert?: Prisma.TechUpsertWithWhereUniqueWithoutProjectsInput | Prisma.TechUpsertWithWhereUniqueWithoutProjectsInput[]
  set?: Prisma.TechWhereUniqueInput | Prisma.TechWhereUniqueInput[]
  disconnect?: Prisma.TechWhereUniqueInput | Prisma.TechWhereUniqueInput[]
  delete?: Prisma.TechWhereUniqueInput | Prisma.TechWhereUniqueInput[]
  connect?: Prisma.TechWhereUniqueInput | Prisma.TechWhereUniqueInput[]
  update?: Prisma.TechUpdateWithWhereUniqueWithoutProjectsInput | Prisma.TechUpdateWithWhereUniqueWithoutProjectsInput[]
  updateMany?: Prisma.TechUpdateManyWithWhereWithoutProjectsInput | Prisma.TechUpdateManyWithWhereWithoutProjectsInput[]
  deleteMany?: Prisma.TechScalarWhereInput | Prisma.TechScalarWhereInput[]
}

export type TechCreateWithoutProjectsInput = {
  id?: string
  name: string
}

export type TechUncheckedCreateWithoutProjectsInput = {
  id?: string
  name: string
}

export type TechCreateOrConnectWithoutProjectsInput = {
  where: Prisma.TechWhereUniqueInput
  create: Prisma.XOR<Prisma.TechCreateWithoutProjectsInput, Prisma.TechUncheckedCreateWithoutProjectsInput>
}

export type TechUpsertWithWhereUniqueWithoutProjectsInput = {
  where: Prisma.TechWhereUniqueInput
  update: Prisma.XOR<Prisma.TechUpdateWithoutProjectsInput, Prisma.TechUncheckedUpdateWithoutProjectsInput>
  create: Prisma.XOR<Prisma.TechCreateWithoutProjectsInput, Prisma.TechUncheckedCreateWithoutProjectsInput>
}

export type TechUpdateWithWhereUniqueWithoutProjectsInput = {
  where: Prisma.TechWhereUniqueInput
  data: Prisma.XOR<Prisma.TechUpdateWithoutProjectsInput, Prisma.TechUncheckedUpdateWithoutProjectsInput>
}

export type TechUpdateManyWithWhereWithoutProjectsInput = {
  where: Prisma.TechScalarWhereInput
  data: Prisma.XOR<Prisma.TechUpdateManyMutationInput, Prisma.TechUncheckedUpdateManyWithoutProjectsInput>
}

export type TechScalarWhereInput = {
  AND?: Prisma.TechScalarWhereInput | Prisma.TechScalarWhereInput[]
  OR?: Prisma.TechScalarWhereInput[]
  NOT?: Prisma.TechScalarWhereInput | Prisma.TechScalarWhereInput[]
  id?: Prisma.StringFilter<"Tech"> | string
  name?: Prisma.StringFilter<"Tech"> | string
}

export type TechUpdateWithoutProjectsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TechUncheckedUpdateWithoutProjectsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TechUncheckedUpdateManyWithoutProjectsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
}


/**
 * Count Type TechCountOutputType
 */

export type TechCountOutputType = {
  projects: number
}

export type TechCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  projects?: boolean | TechCountOutputTypeCountProjectsArgs
}

/**
 * TechCountOutputType without action
 */
export type TechCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TechCountOutputType
   */
  select?: Prisma.TechCountOutputTypeSelect<ExtArgs> | null
}

/**
 * TechCountOutputType without action
 */
export type TechCountOutputTypeCountProjectsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProjectWhereInput
}


export type TechSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  projects?: boolean | Prisma.Tech$projectsArgs<ExtArgs>
  _count?: boolean | Prisma.TechCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["tech"]>

export type TechSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
}, ExtArgs["result"]["tech"]>

export type TechSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
}, ExtArgs["result"]["tech"]>

export type TechSelectScalar = {
  id?: boolean
  name?: boolean
}

export type TechOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name", ExtArgs["result"]["tech"]>
export type TechInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  projects?: boolean | Prisma.Tech$projectsArgs<ExtArgs>
  _count?: boolean | Prisma.TechCountOutputTypeDefaultArgs<ExtArgs>
}
export type TechIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type TechIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $TechPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Tech"
  objects: {
    projects: Prisma.$ProjectPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
  }, ExtArgs["result"]["tech"]>
  composites: {}
}

export type TechGetPayload<S extends boolean | null | undefined | TechDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$TechPayload, S>

export type TechCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<TechFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: TechCountAggregateInputType | true
  }

export interface TechDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tech'], meta: { name: 'Tech' } }
  /**
   * Find zero or one Tech that matches the filter.
   * @param {TechFindUniqueArgs} args - Arguments to find a Tech
   * @example
   * // Get one Tech
   * const tech = await prisma.tech.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TechFindUniqueArgs>(args: Prisma.SelectSubset<T, TechFindUniqueArgs<ExtArgs>>): Prisma.Prisma__TechClient<runtime.Types.Result.GetResult<Prisma.$TechPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Tech that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TechFindUniqueOrThrowArgs} args - Arguments to find a Tech
   * @example
   * // Get one Tech
   * const tech = await prisma.tech.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TechFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, TechFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__TechClient<runtime.Types.Result.GetResult<Prisma.$TechPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Tech that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TechFindFirstArgs} args - Arguments to find a Tech
   * @example
   * // Get one Tech
   * const tech = await prisma.tech.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TechFindFirstArgs>(args?: Prisma.SelectSubset<T, TechFindFirstArgs<ExtArgs>>): Prisma.Prisma__TechClient<runtime.Types.Result.GetResult<Prisma.$TechPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Tech that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TechFindFirstOrThrowArgs} args - Arguments to find a Tech
   * @example
   * // Get one Tech
   * const tech = await prisma.tech.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TechFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, TechFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__TechClient<runtime.Types.Result.GetResult<Prisma.$TechPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Teches that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TechFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Teches
   * const teches = await prisma.tech.findMany()
   * 
   * // Get first 10 Teches
   * const teches = await prisma.tech.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const techWithIdOnly = await prisma.tech.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends TechFindManyArgs>(args?: Prisma.SelectSubset<T, TechFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TechPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Tech.
   * @param {TechCreateArgs} args - Arguments to create a Tech.
   * @example
   * // Create one Tech
   * const Tech = await prisma.tech.create({
   *   data: {
   *     // ... data to create a Tech
   *   }
   * })
   * 
   */
  create<T extends TechCreateArgs>(args: Prisma.SelectSubset<T, TechCreateArgs<ExtArgs>>): Prisma.Prisma__TechClient<runtime.Types.Result.GetResult<Prisma.$TechPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Teches.
   * @param {TechCreateManyArgs} args - Arguments to create many Teches.
   * @example
   * // Create many Teches
   * const tech = await prisma.tech.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends TechCreateManyArgs>(args?: Prisma.SelectSubset<T, TechCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Teches and returns the data saved in the database.
   * @param {TechCreateManyAndReturnArgs} args - Arguments to create many Teches.
   * @example
   * // Create many Teches
   * const tech = await prisma.tech.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Teches and only return the `id`
   * const techWithIdOnly = await prisma.tech.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends TechCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, TechCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TechPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Tech.
   * @param {TechDeleteArgs} args - Arguments to delete one Tech.
   * @example
   * // Delete one Tech
   * const Tech = await prisma.tech.delete({
   *   where: {
   *     // ... filter to delete one Tech
   *   }
   * })
   * 
   */
  delete<T extends TechDeleteArgs>(args: Prisma.SelectSubset<T, TechDeleteArgs<ExtArgs>>): Prisma.Prisma__TechClient<runtime.Types.Result.GetResult<Prisma.$TechPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Tech.
   * @param {TechUpdateArgs} args - Arguments to update one Tech.
   * @example
   * // Update one Tech
   * const tech = await prisma.tech.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends TechUpdateArgs>(args: Prisma.SelectSubset<T, TechUpdateArgs<ExtArgs>>): Prisma.Prisma__TechClient<runtime.Types.Result.GetResult<Prisma.$TechPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Teches.
   * @param {TechDeleteManyArgs} args - Arguments to filter Teches to delete.
   * @example
   * // Delete a few Teches
   * const { count } = await prisma.tech.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends TechDeleteManyArgs>(args?: Prisma.SelectSubset<T, TechDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Teches.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TechUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Teches
   * const tech = await prisma.tech.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends TechUpdateManyArgs>(args: Prisma.SelectSubset<T, TechUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Teches and returns the data updated in the database.
   * @param {TechUpdateManyAndReturnArgs} args - Arguments to update many Teches.
   * @example
   * // Update many Teches
   * const tech = await prisma.tech.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Teches and only return the `id`
   * const techWithIdOnly = await prisma.tech.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends TechUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, TechUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TechPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Tech.
   * @param {TechUpsertArgs} args - Arguments to update or create a Tech.
   * @example
   * // Update or create a Tech
   * const tech = await prisma.tech.upsert({
   *   create: {
   *     // ... data to create a Tech
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Tech we want to update
   *   }
   * })
   */
  upsert<T extends TechUpsertArgs>(args: Prisma.SelectSubset<T, TechUpsertArgs<ExtArgs>>): Prisma.Prisma__TechClient<runtime.Types.Result.GetResult<Prisma.$TechPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Teches.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TechCountArgs} args - Arguments to filter Teches to count.
   * @example
   * // Count the number of Teches
   * const count = await prisma.tech.count({
   *   where: {
   *     // ... the filter for the Teches we want to count
   *   }
   * })
  **/
  count<T extends TechCountArgs>(
    args?: Prisma.Subset<T, TechCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TechCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Tech.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TechAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends TechAggregateArgs>(args: Prisma.Subset<T, TechAggregateArgs>): Prisma.PrismaPromise<GetTechAggregateType<T>>

  /**
   * Group by Tech.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TechGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends TechGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TechGroupByArgs['orderBy'] }
      : { orderBy?: TechGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, TechGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTechGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Tech model
 */
readonly fields: TechFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Tech.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TechClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  projects<T extends Prisma.Tech$projectsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Tech$projectsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Tech model
 */
export interface TechFieldRefs {
  readonly id: Prisma.FieldRef<"Tech", 'String'>
  readonly name: Prisma.FieldRef<"Tech", 'String'>
}
    

// Custom InputTypes
/**
 * Tech findUnique
 */
export type TechFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tech
   */
  select?: Prisma.TechSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Tech
   */
  omit?: Prisma.TechOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TechInclude<ExtArgs> | null
  /**
   * Filter, which Tech to fetch.
   */
  where: Prisma.TechWhereUniqueInput
}

/**
 * Tech findUniqueOrThrow
 */
export type TechFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tech
   */
  select?: Prisma.TechSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Tech
   */
  omit?: Prisma.TechOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TechInclude<ExtArgs> | null
  /**
   * Filter, which Tech to fetch.
   */
  where: Prisma.TechWhereUniqueInput
}

/**
 * Tech findFirst
 */
export type TechFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tech
   */
  select?: Prisma.TechSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Tech
   */
  omit?: Prisma.TechOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TechInclude<ExtArgs> | null
  /**
   * Filter, which Tech to fetch.
   */
  where?: Prisma.TechWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Teches to fetch.
   */
  orderBy?: Prisma.TechOrderByWithRelationInput | Prisma.TechOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Teches.
   */
  cursor?: Prisma.TechWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Teches from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Teches.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Teches.
   */
  distinct?: Prisma.TechScalarFieldEnum | Prisma.TechScalarFieldEnum[]
}

/**
 * Tech findFirstOrThrow
 */
export type TechFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tech
   */
  select?: Prisma.TechSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Tech
   */
  omit?: Prisma.TechOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TechInclude<ExtArgs> | null
  /**
   * Filter, which Tech to fetch.
   */
  where?: Prisma.TechWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Teches to fetch.
   */
  orderBy?: Prisma.TechOrderByWithRelationInput | Prisma.TechOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Teches.
   */
  cursor?: Prisma.TechWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Teches from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Teches.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Teches.
   */
  distinct?: Prisma.TechScalarFieldEnum | Prisma.TechScalarFieldEnum[]
}

/**
 * Tech findMany
 */
export type TechFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tech
   */
  select?: Prisma.TechSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Tech
   */
  omit?: Prisma.TechOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TechInclude<ExtArgs> | null
  /**
   * Filter, which Teches to fetch.
   */
  where?: Prisma.TechWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Teches to fetch.
   */
  orderBy?: Prisma.TechOrderByWithRelationInput | Prisma.TechOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Teches.
   */
  cursor?: Prisma.TechWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Teches from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Teches.
   */
  skip?: number
  distinct?: Prisma.TechScalarFieldEnum | Prisma.TechScalarFieldEnum[]
}

/**
 * Tech create
 */
export type TechCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tech
   */
  select?: Prisma.TechSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Tech
   */
  omit?: Prisma.TechOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TechInclude<ExtArgs> | null
  /**
   * The data needed to create a Tech.
   */
  data: Prisma.XOR<Prisma.TechCreateInput, Prisma.TechUncheckedCreateInput>
}

/**
 * Tech createMany
 */
export type TechCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Teches.
   */
  data: Prisma.TechCreateManyInput | Prisma.TechCreateManyInput[]
}

/**
 * Tech createManyAndReturn
 */
export type TechCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tech
   */
  select?: Prisma.TechSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Tech
   */
  omit?: Prisma.TechOmit<ExtArgs> | null
  /**
   * The data used to create many Teches.
   */
  data: Prisma.TechCreateManyInput | Prisma.TechCreateManyInput[]
}

/**
 * Tech update
 */
export type TechUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tech
   */
  select?: Prisma.TechSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Tech
   */
  omit?: Prisma.TechOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TechInclude<ExtArgs> | null
  /**
   * The data needed to update a Tech.
   */
  data: Prisma.XOR<Prisma.TechUpdateInput, Prisma.TechUncheckedUpdateInput>
  /**
   * Choose, which Tech to update.
   */
  where: Prisma.TechWhereUniqueInput
}

/**
 * Tech updateMany
 */
export type TechUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Teches.
   */
  data: Prisma.XOR<Prisma.TechUpdateManyMutationInput, Prisma.TechUncheckedUpdateManyInput>
  /**
   * Filter which Teches to update
   */
  where?: Prisma.TechWhereInput
  /**
   * Limit how many Teches to update.
   */
  limit?: number
}

/**
 * Tech updateManyAndReturn
 */
export type TechUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tech
   */
  select?: Prisma.TechSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Tech
   */
  omit?: Prisma.TechOmit<ExtArgs> | null
  /**
   * The data used to update Teches.
   */
  data: Prisma.XOR<Prisma.TechUpdateManyMutationInput, Prisma.TechUncheckedUpdateManyInput>
  /**
   * Filter which Teches to update
   */
  where?: Prisma.TechWhereInput
  /**
   * Limit how many Teches to update.
   */
  limit?: number
}

/**
 * Tech upsert
 */
export type TechUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tech
   */
  select?: Prisma.TechSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Tech
   */
  omit?: Prisma.TechOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TechInclude<ExtArgs> | null
  /**
   * The filter to search for the Tech to update in case it exists.
   */
  where: Prisma.TechWhereUniqueInput
  /**
   * In case the Tech found by the `where` argument doesn't exist, create a new Tech with this data.
   */
  create: Prisma.XOR<Prisma.TechCreateInput, Prisma.TechUncheckedCreateInput>
  /**
   * In case the Tech was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TechUpdateInput, Prisma.TechUncheckedUpdateInput>
}

/**
 * Tech delete
 */
export type TechDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tech
   */
  select?: Prisma.TechSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Tech
   */
  omit?: Prisma.TechOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TechInclude<ExtArgs> | null
  /**
   * Filter which Tech to delete.
   */
  where: Prisma.TechWhereUniqueInput
}

/**
 * Tech deleteMany
 */
export type TechDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Teches to delete
   */
  where?: Prisma.TechWhereInput
  /**
   * Limit how many Teches to delete.
   */
  limit?: number
}

/**
 * Tech.projects
 */
export type Tech$projectsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Project
   */
  select?: Prisma.ProjectSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Project
   */
  omit?: Prisma.ProjectOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectInclude<ExtArgs> | null
  where?: Prisma.ProjectWhereInput
  orderBy?: Prisma.ProjectOrderByWithRelationInput | Prisma.ProjectOrderByWithRelationInput[]
  cursor?: Prisma.ProjectWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ProjectScalarFieldEnum | Prisma.ProjectScalarFieldEnum[]
}

/**
 * Tech without action
 */
export type TechDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tech
   */
  select?: Prisma.TechSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Tech
   */
  omit?: Prisma.TechOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TechInclude<ExtArgs> | null
}
