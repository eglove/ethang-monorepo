
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `YouTubeVideo` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/wasm-compiler-edge"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model YouTubeVideo
 * 
 */
export type YouTubeVideoModel = runtime.Types.Result.DefaultSelection<Prisma.$YouTubeVideoPayload>

export type AggregateYouTubeVideo = {
  _count: YouTubeVideoCountAggregateOutputType | null
  _min: YouTubeVideoMinAggregateOutputType | null
  _max: YouTubeVideoMaxAggregateOutputType | null
}

export type YouTubeVideoMinAggregateOutputType = {
  id: string | null
  videoId: string | null
  title: string | null
  url: string | null
}

export type YouTubeVideoMaxAggregateOutputType = {
  id: string | null
  videoId: string | null
  title: string | null
  url: string | null
}

export type YouTubeVideoCountAggregateOutputType = {
  id: number
  videoId: number
  title: number
  url: number
  _all: number
}


export type YouTubeVideoMinAggregateInputType = {
  id?: true
  videoId?: true
  title?: true
  url?: true
}

export type YouTubeVideoMaxAggregateInputType = {
  id?: true
  videoId?: true
  title?: true
  url?: true
}

export type YouTubeVideoCountAggregateInputType = {
  id?: true
  videoId?: true
  title?: true
  url?: true
  _all?: true
}

export type YouTubeVideoAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which YouTubeVideo to aggregate.
   */
  where?: Prisma.YouTubeVideoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of YouTubeVideos to fetch.
   */
  orderBy?: Prisma.YouTubeVideoOrderByWithRelationInput | Prisma.YouTubeVideoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.YouTubeVideoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` YouTubeVideos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` YouTubeVideos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned YouTubeVideos
  **/
  _count?: true | YouTubeVideoCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: YouTubeVideoMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: YouTubeVideoMaxAggregateInputType
}

export type GetYouTubeVideoAggregateType<T extends YouTubeVideoAggregateArgs> = {
      [P in keyof T & keyof AggregateYouTubeVideo]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateYouTubeVideo[P]>
    : Prisma.GetScalarType<T[P], AggregateYouTubeVideo[P]>
}




export type YouTubeVideoGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.YouTubeVideoWhereInput
  orderBy?: Prisma.YouTubeVideoOrderByWithAggregationInput | Prisma.YouTubeVideoOrderByWithAggregationInput[]
  by: Prisma.YouTubeVideoScalarFieldEnum[] | Prisma.YouTubeVideoScalarFieldEnum
  having?: Prisma.YouTubeVideoScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: YouTubeVideoCountAggregateInputType | true
  _min?: YouTubeVideoMinAggregateInputType
  _max?: YouTubeVideoMaxAggregateInputType
}

export type YouTubeVideoGroupByOutputType = {
  id: string
  videoId: string
  title: string
  url: string
  _count: YouTubeVideoCountAggregateOutputType | null
  _min: YouTubeVideoMinAggregateOutputType | null
  _max: YouTubeVideoMaxAggregateOutputType | null
}

type GetYouTubeVideoGroupByPayload<T extends YouTubeVideoGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<YouTubeVideoGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof YouTubeVideoGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], YouTubeVideoGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], YouTubeVideoGroupByOutputType[P]>
      }
    >
  > 



export type YouTubeVideoWhereInput = {
  AND?: Prisma.YouTubeVideoWhereInput | Prisma.YouTubeVideoWhereInput[]
  OR?: Prisma.YouTubeVideoWhereInput[]
  NOT?: Prisma.YouTubeVideoWhereInput | Prisma.YouTubeVideoWhereInput[]
  id?: Prisma.StringFilter<"YouTubeVideo"> | string
  videoId?: Prisma.StringFilter<"YouTubeVideo"> | string
  title?: Prisma.StringFilter<"YouTubeVideo"> | string
  url?: Prisma.StringFilter<"YouTubeVideo"> | string
  news?: Prisma.XOR<Prisma.NewsScalarRelationFilter, Prisma.NewsWhereInput>
}

export type YouTubeVideoOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  videoId?: Prisma.SortOrder
  title?: Prisma.SortOrder
  url?: Prisma.SortOrder
  news?: Prisma.NewsOrderByWithRelationInput
}

export type YouTubeVideoWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  videoId?: string
  url?: string
  AND?: Prisma.YouTubeVideoWhereInput | Prisma.YouTubeVideoWhereInput[]
  OR?: Prisma.YouTubeVideoWhereInput[]
  NOT?: Prisma.YouTubeVideoWhereInput | Prisma.YouTubeVideoWhereInput[]
  title?: Prisma.StringFilter<"YouTubeVideo"> | string
  news?: Prisma.XOR<Prisma.NewsScalarRelationFilter, Prisma.NewsWhereInput>
}, "id" | "videoId" | "url">

export type YouTubeVideoOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  videoId?: Prisma.SortOrder
  title?: Prisma.SortOrder
  url?: Prisma.SortOrder
  _count?: Prisma.YouTubeVideoCountOrderByAggregateInput
  _max?: Prisma.YouTubeVideoMaxOrderByAggregateInput
  _min?: Prisma.YouTubeVideoMinOrderByAggregateInput
}

export type YouTubeVideoScalarWhereWithAggregatesInput = {
  AND?: Prisma.YouTubeVideoScalarWhereWithAggregatesInput | Prisma.YouTubeVideoScalarWhereWithAggregatesInput[]
  OR?: Prisma.YouTubeVideoScalarWhereWithAggregatesInput[]
  NOT?: Prisma.YouTubeVideoScalarWhereWithAggregatesInput | Prisma.YouTubeVideoScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"YouTubeVideo"> | string
  videoId?: Prisma.StringWithAggregatesFilter<"YouTubeVideo"> | string
  title?: Prisma.StringWithAggregatesFilter<"YouTubeVideo"> | string
  url?: Prisma.StringWithAggregatesFilter<"YouTubeVideo"> | string
}

export type YouTubeVideoCreateInput = {
  videoId: string
  title: string
  url: string
  news?: Prisma.NewsCreateNestedOneWithoutYoutubeVideoInput
}

export type YouTubeVideoUncheckedCreateInput = {
  id?: string
  videoId: string
  title: string
  url: string
}

export type YouTubeVideoUpdateInput = {
  videoId?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.StringFieldUpdateOperationsInput | string
  news?: Prisma.NewsUpdateOneRequiredWithoutYoutubeVideoNestedInput
}

export type YouTubeVideoUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  videoId?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.StringFieldUpdateOperationsInput | string
}

export type YouTubeVideoCreateManyInput = {
  id?: string
  videoId: string
  title: string
  url: string
}

export type YouTubeVideoUpdateManyMutationInput = {
  videoId?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.StringFieldUpdateOperationsInput | string
}

export type YouTubeVideoUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  videoId?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.StringFieldUpdateOperationsInput | string
}

export type YouTubeVideoNullableScalarRelationFilter = {
  is?: Prisma.YouTubeVideoWhereInput | null
  isNot?: Prisma.YouTubeVideoWhereInput | null
}

export type YouTubeVideoCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  videoId?: Prisma.SortOrder
  title?: Prisma.SortOrder
  url?: Prisma.SortOrder
}

export type YouTubeVideoMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  videoId?: Prisma.SortOrder
  title?: Prisma.SortOrder
  url?: Prisma.SortOrder
}

export type YouTubeVideoMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  videoId?: Prisma.SortOrder
  title?: Prisma.SortOrder
  url?: Prisma.SortOrder
}

export type YouTubeVideoCreateNestedOneWithoutNewsInput = {
  create?: Prisma.XOR<Prisma.YouTubeVideoCreateWithoutNewsInput, Prisma.YouTubeVideoUncheckedCreateWithoutNewsInput>
  connectOrCreate?: Prisma.YouTubeVideoCreateOrConnectWithoutNewsInput
  connect?: Prisma.YouTubeVideoWhereUniqueInput
}

export type YouTubeVideoUncheckedCreateNestedOneWithoutNewsInput = {
  create?: Prisma.XOR<Prisma.YouTubeVideoCreateWithoutNewsInput, Prisma.YouTubeVideoUncheckedCreateWithoutNewsInput>
  connectOrCreate?: Prisma.YouTubeVideoCreateOrConnectWithoutNewsInput
  connect?: Prisma.YouTubeVideoWhereUniqueInput
}

export type YouTubeVideoUpdateOneWithoutNewsNestedInput = {
  create?: Prisma.XOR<Prisma.YouTubeVideoCreateWithoutNewsInput, Prisma.YouTubeVideoUncheckedCreateWithoutNewsInput>
  connectOrCreate?: Prisma.YouTubeVideoCreateOrConnectWithoutNewsInput
  upsert?: Prisma.YouTubeVideoUpsertWithoutNewsInput
  disconnect?: Prisma.YouTubeVideoWhereInput | boolean
  delete?: Prisma.YouTubeVideoWhereInput | boolean
  connect?: Prisma.YouTubeVideoWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.YouTubeVideoUpdateToOneWithWhereWithoutNewsInput, Prisma.YouTubeVideoUpdateWithoutNewsInput>, Prisma.YouTubeVideoUncheckedUpdateWithoutNewsInput>
}

export type YouTubeVideoUncheckedUpdateOneWithoutNewsNestedInput = {
  create?: Prisma.XOR<Prisma.YouTubeVideoCreateWithoutNewsInput, Prisma.YouTubeVideoUncheckedCreateWithoutNewsInput>
  connectOrCreate?: Prisma.YouTubeVideoCreateOrConnectWithoutNewsInput
  upsert?: Prisma.YouTubeVideoUpsertWithoutNewsInput
  disconnect?: Prisma.YouTubeVideoWhereInput | boolean
  delete?: Prisma.YouTubeVideoWhereInput | boolean
  connect?: Prisma.YouTubeVideoWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.YouTubeVideoUpdateToOneWithWhereWithoutNewsInput, Prisma.YouTubeVideoUpdateWithoutNewsInput>, Prisma.YouTubeVideoUncheckedUpdateWithoutNewsInput>
}

export type YouTubeVideoCreateWithoutNewsInput = {
  videoId: string
  title: string
  url: string
}

export type YouTubeVideoUncheckedCreateWithoutNewsInput = {
  videoId: string
  title: string
  url: string
}

export type YouTubeVideoCreateOrConnectWithoutNewsInput = {
  where: Prisma.YouTubeVideoWhereUniqueInput
  create: Prisma.XOR<Prisma.YouTubeVideoCreateWithoutNewsInput, Prisma.YouTubeVideoUncheckedCreateWithoutNewsInput>
}

export type YouTubeVideoUpsertWithoutNewsInput = {
  update: Prisma.XOR<Prisma.YouTubeVideoUpdateWithoutNewsInput, Prisma.YouTubeVideoUncheckedUpdateWithoutNewsInput>
  create: Prisma.XOR<Prisma.YouTubeVideoCreateWithoutNewsInput, Prisma.YouTubeVideoUncheckedCreateWithoutNewsInput>
  where?: Prisma.YouTubeVideoWhereInput
}

export type YouTubeVideoUpdateToOneWithWhereWithoutNewsInput = {
  where?: Prisma.YouTubeVideoWhereInput
  data: Prisma.XOR<Prisma.YouTubeVideoUpdateWithoutNewsInput, Prisma.YouTubeVideoUncheckedUpdateWithoutNewsInput>
}

export type YouTubeVideoUpdateWithoutNewsInput = {
  videoId?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.StringFieldUpdateOperationsInput | string
}

export type YouTubeVideoUncheckedUpdateWithoutNewsInput = {
  videoId?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.StringFieldUpdateOperationsInput | string
}



export type YouTubeVideoSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  videoId?: boolean
  title?: boolean
  url?: boolean
  news?: boolean | Prisma.NewsDefaultArgs<ExtArgs>
}, ExtArgs["result"]["youTubeVideo"]>

export type YouTubeVideoSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  videoId?: boolean
  title?: boolean
  url?: boolean
  news?: boolean | Prisma.NewsDefaultArgs<ExtArgs>
}, ExtArgs["result"]["youTubeVideo"]>

export type YouTubeVideoSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  videoId?: boolean
  title?: boolean
  url?: boolean
  news?: boolean | Prisma.NewsDefaultArgs<ExtArgs>
}, ExtArgs["result"]["youTubeVideo"]>

export type YouTubeVideoSelectScalar = {
  id?: boolean
  videoId?: boolean
  title?: boolean
  url?: boolean
}

export type YouTubeVideoOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "videoId" | "title" | "url", ExtArgs["result"]["youTubeVideo"]>
export type YouTubeVideoInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  news?: boolean | Prisma.NewsDefaultArgs<ExtArgs>
}
export type YouTubeVideoIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  news?: boolean | Prisma.NewsDefaultArgs<ExtArgs>
}
export type YouTubeVideoIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  news?: boolean | Prisma.NewsDefaultArgs<ExtArgs>
}

export type $YouTubeVideoPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "YouTubeVideo"
  objects: {
    news: Prisma.$NewsPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    videoId: string
    title: string
    url: string
  }, ExtArgs["result"]["youTubeVideo"]>
  composites: {}
}

export type YouTubeVideoGetPayload<S extends boolean | null | undefined | YouTubeVideoDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$YouTubeVideoPayload, S>

export type YouTubeVideoCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<YouTubeVideoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: YouTubeVideoCountAggregateInputType | true
  }

export interface YouTubeVideoDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['YouTubeVideo'], meta: { name: 'YouTubeVideo' } }
  /**
   * Find zero or one YouTubeVideo that matches the filter.
   * @param {YouTubeVideoFindUniqueArgs} args - Arguments to find a YouTubeVideo
   * @example
   * // Get one YouTubeVideo
   * const youTubeVideo = await prisma.youTubeVideo.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends YouTubeVideoFindUniqueArgs>(args: Prisma.SelectSubset<T, YouTubeVideoFindUniqueArgs<ExtArgs>>): Prisma.Prisma__YouTubeVideoClient<runtime.Types.Result.GetResult<Prisma.$YouTubeVideoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one YouTubeVideo that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {YouTubeVideoFindUniqueOrThrowArgs} args - Arguments to find a YouTubeVideo
   * @example
   * // Get one YouTubeVideo
   * const youTubeVideo = await prisma.youTubeVideo.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends YouTubeVideoFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, YouTubeVideoFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__YouTubeVideoClient<runtime.Types.Result.GetResult<Prisma.$YouTubeVideoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first YouTubeVideo that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {YouTubeVideoFindFirstArgs} args - Arguments to find a YouTubeVideo
   * @example
   * // Get one YouTubeVideo
   * const youTubeVideo = await prisma.youTubeVideo.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends YouTubeVideoFindFirstArgs>(args?: Prisma.SelectSubset<T, YouTubeVideoFindFirstArgs<ExtArgs>>): Prisma.Prisma__YouTubeVideoClient<runtime.Types.Result.GetResult<Prisma.$YouTubeVideoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first YouTubeVideo that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {YouTubeVideoFindFirstOrThrowArgs} args - Arguments to find a YouTubeVideo
   * @example
   * // Get one YouTubeVideo
   * const youTubeVideo = await prisma.youTubeVideo.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends YouTubeVideoFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, YouTubeVideoFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__YouTubeVideoClient<runtime.Types.Result.GetResult<Prisma.$YouTubeVideoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more YouTubeVideos that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {YouTubeVideoFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all YouTubeVideos
   * const youTubeVideos = await prisma.youTubeVideo.findMany()
   * 
   * // Get first 10 YouTubeVideos
   * const youTubeVideos = await prisma.youTubeVideo.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const youTubeVideoWithIdOnly = await prisma.youTubeVideo.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends YouTubeVideoFindManyArgs>(args?: Prisma.SelectSubset<T, YouTubeVideoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$YouTubeVideoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a YouTubeVideo.
   * @param {YouTubeVideoCreateArgs} args - Arguments to create a YouTubeVideo.
   * @example
   * // Create one YouTubeVideo
   * const YouTubeVideo = await prisma.youTubeVideo.create({
   *   data: {
   *     // ... data to create a YouTubeVideo
   *   }
   * })
   * 
   */
  create<T extends YouTubeVideoCreateArgs>(args: Prisma.SelectSubset<T, YouTubeVideoCreateArgs<ExtArgs>>): Prisma.Prisma__YouTubeVideoClient<runtime.Types.Result.GetResult<Prisma.$YouTubeVideoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many YouTubeVideos.
   * @param {YouTubeVideoCreateManyArgs} args - Arguments to create many YouTubeVideos.
   * @example
   * // Create many YouTubeVideos
   * const youTubeVideo = await prisma.youTubeVideo.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends YouTubeVideoCreateManyArgs>(args?: Prisma.SelectSubset<T, YouTubeVideoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many YouTubeVideos and returns the data saved in the database.
   * @param {YouTubeVideoCreateManyAndReturnArgs} args - Arguments to create many YouTubeVideos.
   * @example
   * // Create many YouTubeVideos
   * const youTubeVideo = await prisma.youTubeVideo.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many YouTubeVideos and only return the `id`
   * const youTubeVideoWithIdOnly = await prisma.youTubeVideo.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends YouTubeVideoCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, YouTubeVideoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$YouTubeVideoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a YouTubeVideo.
   * @param {YouTubeVideoDeleteArgs} args - Arguments to delete one YouTubeVideo.
   * @example
   * // Delete one YouTubeVideo
   * const YouTubeVideo = await prisma.youTubeVideo.delete({
   *   where: {
   *     // ... filter to delete one YouTubeVideo
   *   }
   * })
   * 
   */
  delete<T extends YouTubeVideoDeleteArgs>(args: Prisma.SelectSubset<T, YouTubeVideoDeleteArgs<ExtArgs>>): Prisma.Prisma__YouTubeVideoClient<runtime.Types.Result.GetResult<Prisma.$YouTubeVideoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one YouTubeVideo.
   * @param {YouTubeVideoUpdateArgs} args - Arguments to update one YouTubeVideo.
   * @example
   * // Update one YouTubeVideo
   * const youTubeVideo = await prisma.youTubeVideo.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends YouTubeVideoUpdateArgs>(args: Prisma.SelectSubset<T, YouTubeVideoUpdateArgs<ExtArgs>>): Prisma.Prisma__YouTubeVideoClient<runtime.Types.Result.GetResult<Prisma.$YouTubeVideoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more YouTubeVideos.
   * @param {YouTubeVideoDeleteManyArgs} args - Arguments to filter YouTubeVideos to delete.
   * @example
   * // Delete a few YouTubeVideos
   * const { count } = await prisma.youTubeVideo.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends YouTubeVideoDeleteManyArgs>(args?: Prisma.SelectSubset<T, YouTubeVideoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more YouTubeVideos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {YouTubeVideoUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many YouTubeVideos
   * const youTubeVideo = await prisma.youTubeVideo.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends YouTubeVideoUpdateManyArgs>(args: Prisma.SelectSubset<T, YouTubeVideoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more YouTubeVideos and returns the data updated in the database.
   * @param {YouTubeVideoUpdateManyAndReturnArgs} args - Arguments to update many YouTubeVideos.
   * @example
   * // Update many YouTubeVideos
   * const youTubeVideo = await prisma.youTubeVideo.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more YouTubeVideos and only return the `id`
   * const youTubeVideoWithIdOnly = await prisma.youTubeVideo.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends YouTubeVideoUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, YouTubeVideoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$YouTubeVideoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one YouTubeVideo.
   * @param {YouTubeVideoUpsertArgs} args - Arguments to update or create a YouTubeVideo.
   * @example
   * // Update or create a YouTubeVideo
   * const youTubeVideo = await prisma.youTubeVideo.upsert({
   *   create: {
   *     // ... data to create a YouTubeVideo
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the YouTubeVideo we want to update
   *   }
   * })
   */
  upsert<T extends YouTubeVideoUpsertArgs>(args: Prisma.SelectSubset<T, YouTubeVideoUpsertArgs<ExtArgs>>): Prisma.Prisma__YouTubeVideoClient<runtime.Types.Result.GetResult<Prisma.$YouTubeVideoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of YouTubeVideos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {YouTubeVideoCountArgs} args - Arguments to filter YouTubeVideos to count.
   * @example
   * // Count the number of YouTubeVideos
   * const count = await prisma.youTubeVideo.count({
   *   where: {
   *     // ... the filter for the YouTubeVideos we want to count
   *   }
   * })
  **/
  count<T extends YouTubeVideoCountArgs>(
    args?: Prisma.Subset<T, YouTubeVideoCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], YouTubeVideoCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a YouTubeVideo.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {YouTubeVideoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends YouTubeVideoAggregateArgs>(args: Prisma.Subset<T, YouTubeVideoAggregateArgs>): Prisma.PrismaPromise<GetYouTubeVideoAggregateType<T>>

  /**
   * Group by YouTubeVideo.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {YouTubeVideoGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends YouTubeVideoGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: YouTubeVideoGroupByArgs['orderBy'] }
      : { orderBy?: YouTubeVideoGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, YouTubeVideoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetYouTubeVideoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the YouTubeVideo model
 */
readonly fields: YouTubeVideoFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for YouTubeVideo.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__YouTubeVideoClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  news<T extends Prisma.NewsDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.NewsDefaultArgs<ExtArgs>>): Prisma.Prisma__NewsClient<runtime.Types.Result.GetResult<Prisma.$NewsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the YouTubeVideo model
 */
export interface YouTubeVideoFieldRefs {
  readonly id: Prisma.FieldRef<"YouTubeVideo", 'String'>
  readonly videoId: Prisma.FieldRef<"YouTubeVideo", 'String'>
  readonly title: Prisma.FieldRef<"YouTubeVideo", 'String'>
  readonly url: Prisma.FieldRef<"YouTubeVideo", 'String'>
}
    

// Custom InputTypes
/**
 * YouTubeVideo findUnique
 */
export type YouTubeVideoFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the YouTubeVideo
   */
  select?: Prisma.YouTubeVideoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the YouTubeVideo
   */
  omit?: Prisma.YouTubeVideoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.YouTubeVideoInclude<ExtArgs> | null
  /**
   * Filter, which YouTubeVideo to fetch.
   */
  where: Prisma.YouTubeVideoWhereUniqueInput
}

/**
 * YouTubeVideo findUniqueOrThrow
 */
export type YouTubeVideoFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the YouTubeVideo
   */
  select?: Prisma.YouTubeVideoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the YouTubeVideo
   */
  omit?: Prisma.YouTubeVideoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.YouTubeVideoInclude<ExtArgs> | null
  /**
   * Filter, which YouTubeVideo to fetch.
   */
  where: Prisma.YouTubeVideoWhereUniqueInput
}

/**
 * YouTubeVideo findFirst
 */
export type YouTubeVideoFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the YouTubeVideo
   */
  select?: Prisma.YouTubeVideoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the YouTubeVideo
   */
  omit?: Prisma.YouTubeVideoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.YouTubeVideoInclude<ExtArgs> | null
  /**
   * Filter, which YouTubeVideo to fetch.
   */
  where?: Prisma.YouTubeVideoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of YouTubeVideos to fetch.
   */
  orderBy?: Prisma.YouTubeVideoOrderByWithRelationInput | Prisma.YouTubeVideoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for YouTubeVideos.
   */
  cursor?: Prisma.YouTubeVideoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` YouTubeVideos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` YouTubeVideos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of YouTubeVideos.
   */
  distinct?: Prisma.YouTubeVideoScalarFieldEnum | Prisma.YouTubeVideoScalarFieldEnum[]
}

/**
 * YouTubeVideo findFirstOrThrow
 */
export type YouTubeVideoFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the YouTubeVideo
   */
  select?: Prisma.YouTubeVideoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the YouTubeVideo
   */
  omit?: Prisma.YouTubeVideoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.YouTubeVideoInclude<ExtArgs> | null
  /**
   * Filter, which YouTubeVideo to fetch.
   */
  where?: Prisma.YouTubeVideoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of YouTubeVideos to fetch.
   */
  orderBy?: Prisma.YouTubeVideoOrderByWithRelationInput | Prisma.YouTubeVideoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for YouTubeVideos.
   */
  cursor?: Prisma.YouTubeVideoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` YouTubeVideos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` YouTubeVideos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of YouTubeVideos.
   */
  distinct?: Prisma.YouTubeVideoScalarFieldEnum | Prisma.YouTubeVideoScalarFieldEnum[]
}

/**
 * YouTubeVideo findMany
 */
export type YouTubeVideoFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the YouTubeVideo
   */
  select?: Prisma.YouTubeVideoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the YouTubeVideo
   */
  omit?: Prisma.YouTubeVideoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.YouTubeVideoInclude<ExtArgs> | null
  /**
   * Filter, which YouTubeVideos to fetch.
   */
  where?: Prisma.YouTubeVideoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of YouTubeVideos to fetch.
   */
  orderBy?: Prisma.YouTubeVideoOrderByWithRelationInput | Prisma.YouTubeVideoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing YouTubeVideos.
   */
  cursor?: Prisma.YouTubeVideoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` YouTubeVideos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` YouTubeVideos.
   */
  skip?: number
  distinct?: Prisma.YouTubeVideoScalarFieldEnum | Prisma.YouTubeVideoScalarFieldEnum[]
}

/**
 * YouTubeVideo create
 */
export type YouTubeVideoCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the YouTubeVideo
   */
  select?: Prisma.YouTubeVideoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the YouTubeVideo
   */
  omit?: Prisma.YouTubeVideoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.YouTubeVideoInclude<ExtArgs> | null
  /**
   * The data needed to create a YouTubeVideo.
   */
  data: Prisma.XOR<Prisma.YouTubeVideoCreateInput, Prisma.YouTubeVideoUncheckedCreateInput>
}

/**
 * YouTubeVideo createMany
 */
export type YouTubeVideoCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many YouTubeVideos.
   */
  data: Prisma.YouTubeVideoCreateManyInput | Prisma.YouTubeVideoCreateManyInput[]
}

/**
 * YouTubeVideo createManyAndReturn
 */
export type YouTubeVideoCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the YouTubeVideo
   */
  select?: Prisma.YouTubeVideoSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the YouTubeVideo
   */
  omit?: Prisma.YouTubeVideoOmit<ExtArgs> | null
  /**
   * The data used to create many YouTubeVideos.
   */
  data: Prisma.YouTubeVideoCreateManyInput | Prisma.YouTubeVideoCreateManyInput[]
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.YouTubeVideoIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * YouTubeVideo update
 */
export type YouTubeVideoUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the YouTubeVideo
   */
  select?: Prisma.YouTubeVideoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the YouTubeVideo
   */
  omit?: Prisma.YouTubeVideoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.YouTubeVideoInclude<ExtArgs> | null
  /**
   * The data needed to update a YouTubeVideo.
   */
  data: Prisma.XOR<Prisma.YouTubeVideoUpdateInput, Prisma.YouTubeVideoUncheckedUpdateInput>
  /**
   * Choose, which YouTubeVideo to update.
   */
  where: Prisma.YouTubeVideoWhereUniqueInput
}

/**
 * YouTubeVideo updateMany
 */
export type YouTubeVideoUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update YouTubeVideos.
   */
  data: Prisma.XOR<Prisma.YouTubeVideoUpdateManyMutationInput, Prisma.YouTubeVideoUncheckedUpdateManyInput>
  /**
   * Filter which YouTubeVideos to update
   */
  where?: Prisma.YouTubeVideoWhereInput
  /**
   * Limit how many YouTubeVideos to update.
   */
  limit?: number
}

/**
 * YouTubeVideo updateManyAndReturn
 */
export type YouTubeVideoUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the YouTubeVideo
   */
  select?: Prisma.YouTubeVideoSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the YouTubeVideo
   */
  omit?: Prisma.YouTubeVideoOmit<ExtArgs> | null
  /**
   * The data used to update YouTubeVideos.
   */
  data: Prisma.XOR<Prisma.YouTubeVideoUpdateManyMutationInput, Prisma.YouTubeVideoUncheckedUpdateManyInput>
  /**
   * Filter which YouTubeVideos to update
   */
  where?: Prisma.YouTubeVideoWhereInput
  /**
   * Limit how many YouTubeVideos to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.YouTubeVideoIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * YouTubeVideo upsert
 */
export type YouTubeVideoUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the YouTubeVideo
   */
  select?: Prisma.YouTubeVideoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the YouTubeVideo
   */
  omit?: Prisma.YouTubeVideoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.YouTubeVideoInclude<ExtArgs> | null
  /**
   * The filter to search for the YouTubeVideo to update in case it exists.
   */
  where: Prisma.YouTubeVideoWhereUniqueInput
  /**
   * In case the YouTubeVideo found by the `where` argument doesn't exist, create a new YouTubeVideo with this data.
   */
  create: Prisma.XOR<Prisma.YouTubeVideoCreateInput, Prisma.YouTubeVideoUncheckedCreateInput>
  /**
   * In case the YouTubeVideo was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.YouTubeVideoUpdateInput, Prisma.YouTubeVideoUncheckedUpdateInput>
}

/**
 * YouTubeVideo delete
 */
export type YouTubeVideoDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the YouTubeVideo
   */
  select?: Prisma.YouTubeVideoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the YouTubeVideo
   */
  omit?: Prisma.YouTubeVideoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.YouTubeVideoInclude<ExtArgs> | null
  /**
   * Filter which YouTubeVideo to delete.
   */
  where: Prisma.YouTubeVideoWhereUniqueInput
}

/**
 * YouTubeVideo deleteMany
 */
export type YouTubeVideoDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which YouTubeVideos to delete
   */
  where?: Prisma.YouTubeVideoWhereInput
  /**
   * Limit how many YouTubeVideos to delete.
   */
  limit?: number
}

/**
 * YouTubeVideo without action
 */
export type YouTubeVideoDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the YouTubeVideo
   */
  select?: Prisma.YouTubeVideoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the YouTubeVideo
   */
  omit?: Prisma.YouTubeVideoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.YouTubeVideoInclude<ExtArgs> | null
}
