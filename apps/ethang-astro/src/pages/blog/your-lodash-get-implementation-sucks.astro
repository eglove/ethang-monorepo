---
import Layout from "../../layouts/Layout.astro";
import CodeBlock from "../../components/CodeBlock.astro";
import "highlight.js/styles/night-owl.css";
import lodashTest1 from "../../images/lodash-impl/lodash-test-1.png";
import lodashTest2 from "../../images/lodash-impl/lodash-test-2.png";
import lodashTest3 from "../../images/lodash-impl/lodash-test-3.png";
import lodashTest4 from "../../images/lodash-impl/lodash-test-4.png";
import lodashTest5 from "../../images/lodash-impl/lodash-test-5.png";
import { Image } from "astro:assets";

const lodashAcronym = "YMNNL";

const naiveGet = `
const get = (obj, path, defValue) => {
  if (!path) return undefined;
  
  const pathArray = Array.isArray(path) 
    ? path 
    : path.match(/([^[.\\]])+/g);
  
  const result = pathArray.reduce(
    (prevObj, key) => prevObj && prevObj[key],
    obj
  );
  
  return result === undefined ? defValue : result;
};`;

const failTest1 = `
it("should preserve the sign of 0", () => {
  const object = { "-0": "a", 0: "b" };
  const props = [-0, Object(-0), 0, Object(0)];

  const actual = props.map((prop) => get(object, prop));

  expect(actual).toStrictEqual(["a", "a", "b", "b"]);
});`;

const failTest2 = `
it("should get symbol keyed property values", () => {
  const object = {};
  const symbol = Symbol();
  object[symbol] = 1;

  expect(get(object, symbol)).toBe(1);
});`;

const failTest3 = `
it("should get a key over a path", () => {
  const object = { "a.b": 1, a: { b: 2 } };

  ["a.b", ["a.b"]]
    .forEach((path) => expect(get(object, path)).toBe(1));
});`;

const failTest4 = `
it("should not ignore empty brackets", () => {
  const object = { a: { "": 1 } };
  expect(get(object, "a[]")).toBe(1);
});`;

const failTest5 = `
it("should handle empty paths", () => {
  [
    ["", ""],
    [[], [""]],
  ].forEach((pair) => {
    expect(get({}, pair[0])).toBe(undefined);
    expect(get({ "": 3 }, pair[1])).toBe(3);
  });
});`;

const failTest6 = `
it("should handle complex paths", () => {
  const object = {
    a: {
      "-1.23": { 
        '["b"]': { 
          c: { "['d']": { "\\ne\\n": { f: { g: 8 } } } } 
        } 
      },
    },
  };

  const paths = [
    "a[-1.23][\\"[\\\\\\"b\\\\\\"]\\"].c['[\\\\'d\\\\']'][\\ne\\n][f].g",
    ["a", "-1.23", '["b"]', "c", "['d']", "\\ne\\n", "f", "g"],
  ];

  paths.forEach((path) => {
    expect(get(object, path)).toBe(8);
  });
});`;

const failTest7 = `
it("should return undefined when object is nullish", () => {
  ["constructor", ["constructor"]].forEach((path) => {
    expect(get(null, path)).toBe(undefined);
    expect(get(undefined, path)).toBe(undefined);
  });
});`;

const failTest8 = `
it("should return undefined for deep paths when object is nullish", () => {
  const values = [null, undefined];
  const expected = values.map(() => undefined);
  const paths = [
    "constructor.prototype.valueOf",
    ["constructor", "prototype", "valueOf"],
  ];

  paths.forEach((path) => {
    const actual = values.map((value) => get(value, path));
    expect(actual).toEqual(expected);
  });
});`;

const failTest9 = `
it(\`should return undefined if parts of path are missing\`, () => {
  const object = { a: [, null] };

  ["a[1].b.c", ["a", "1", "b", "c"]].forEach((path) => {
    expect(get(object, path)).toBe(undefined);
  });
});`;

const failTest10 = `
it(\`should follow path over non-plain objects\`, () => {
  const paths = ["a.b", ["a", "b"]];
  const numberProto = Number.prototype;

  paths.forEach((path) => {
    numberProto.a = { b: 2 };
    expect(get(0, path)).toBe(2);
    delete numberProto.a;
  });
});`;

const failTest11 = `
it(\`should return the default value for undefined values\`, () => {
  const object = { a: {} };
  const falsey = [, null, undefined, false, 0, NaN, ""];
  const empties = [[], {}].concat(falsey.slice(1));

  const values = empties.concat(true, new Date(), 1, /x/, "a");
  const expected = values.map((value) => [value, value]);

  ["a.b", ["a", "b"]].forEach((path) => {
    const actual = values.map((value) => [
      get(object, path, value),
      get(null, path, value),
    ]);

    expect(actual).toEqual(expected);
  });
});

it(\`should return the default value when path is empty\`, () => {
  expect(get({}, [], "a")).toBe("a");
});`;
---

<Layout title="Your lodash.get implementation sucks"
        description="Why you can't recreate lodash.get and why you should just use lodash.">
  <main class="prose max-w-screen-lg">
    <h1>Your lodash.get Implementation Sucks</h1>
    <p>After watching a web app experience 3 white screen crashes within the
      same week I suggested introducing lodash and its <a
        href="https://github.com/eslint-plugins/eslint-plugin-lodash"
        target="_blank">matching eslint plugin</a>
      to enforce it's usage. I was linked to this page as a retort: <a
        href="https://youmightnotneed.com/lodash/" target="_blank">You Might Not
        Need Lodash</a> ({lodashAcronym}).</p>
    <p>I responded by quoting the page:</p>
    <blockquote cite="https://youmightnotneed.com/lodash/"><p>But you should use
      Lodash.</p></blockquote>
    <p>-<cite>You Might Not
      Need Lodash</cite></p>
    <p>When a library like lodash has been around as long as it has, it becomes
      "battle tested" to the most unforeseen edge cases that a "simple utility"
      could have possibly taken into account on initial creation.</p>
    <p>One who has never considered what lodash.get actually does or how it
      works might think this is equivalent:</p>
    <CodeBlock code={naiveGet} />
    <p>Let's now add the test cases from the {lodashAcronym} implementation. And
      indeed all tests pass:</p>
    <div class="w-full relative">
      <Image class="object-contain" src={lodashTest1} alt="tests pass" />
    </div>
    <p>In fact, looking at the total time it takes to run all test cases, this
      version is slightly faster:</p>
    <div class="w-full relative">
      <Image class="object-contain" src={lodashTest2}
             alt="bench is 1.63x faster" />
    </div>
    <p>But let's start adding some test cases from the lodash source. I should
      mention that the lodash soruce code has been going through some major
      changes (such as going to TS first instead of depending on @types/lodash)
      and I pulled these tests from the v5 WIP. As the current version
      is being stripped down for rewrites, making the codebase confusing to
      traverse. But these v5 tests will
      make the point nicely.</p>
    <p><a href="https://github.com/lodash/lodash/blob/v5-wip/test/get-and-result.spec.js" target="_blank">See the lodash tests here.</a></p>
    <p>The first failure is here:</p>
    <CodeBlock code={failTest1} />
    <p>The first issue is that the {lodashAcronym} doesn't support number keys.
      <strong>It hasn't even taken into account what is and isn't a valid key in
        JavaScript and naively only supports strings!</strong> So what is a
      valid JS object key? What does our get function need to support?</p>
    <ul>
      <li>Numbers</li>
      <li>Booleans</li>
      <li>null</li>
      <li>undefined</li>
      <li>Symbols</li>
      <li>Strings (including "address.street" or "items[0]"</li>
      <li>Plain key objects Object(0), Object(-0)</li>
    </ul>
    <p>So to pass this test, the implementation needs to support numbers... and
      don't get me started on the edge cases there. Determining what is and
      isn't
      something in a language like JS is no easy task.</p>
    <p>This first test doesn't just fail on numbers, but on Object(0), and
      Object(-0) as well. You can fairly argue that this latter Object case is
      unrealistic. But simply removing it from test cases won't get you very
      far. Because remember this function also needs to support both "0", [0],
      and the subtle difference of ["0"].</p>
    <p>The odd Object(0) is not the issue here. It is that fact that
      <strong>this implementation, who's only job is to resolve object keys,
        doesn't
        consider the language standards for what may be a key.</strong></p>
    <p>Next test.</p>
    <CodeBlock code={failTest2} />
    <p>Oh boy, now we have a legitimate edge case. Symbols, a highly underused
      primitive, are also not supported. The failures are starting to add
      up.</p>
    <div class="w-full relative">
      <Image class="object-contain" src={lodashTest3}
             alt="naive version is now failing two tests where the original is succeeding" />
    </div>
    <p>The next failure, shows another critical edge case. Considering possible
      conflict in user intention. Here the result of "a.b" should be 1, but the
      naive implementation returns 2.</p>
    <CodeBlock code={failTest3} />
    <p>You could say this is personal preference, but the naive implementation
      doesn't even consider the possibility at all. If you say that periods
      shouldn't exist in the keys of objects, I would argue that this IS a
      necessary test case. Especially when it comes to backend data that is not
      necessarily formatted for the rules of JavaScript.</p>
    <p>Another failure. This is the only way to get the value at
      object.a[""].</p>
    <CodeBlock code={failTest4} />
    <p>Again, especially when dealing with unpredictable backend
      data and potential bugs, this case needs to be accounted for. <strong>These
        edge cases are the only purpose of a get function.</strong> By accessing
      empty string keys, we avoid unexpected page crashes and values.</p>
    <p>Fail:</p>
    <CodeBlock code={failTest5} />
    <p>It doesn't handle complex paths correctly:</p>
    <CodeBlock code={failTest6} />
    <p>No handling for nullish objects:</p>
    <CodeBlock code={failTest7} />
    <p>If that didn't work, this won't.</p>
    <CodeBlock code={failTest8} />
    <p>Nope.</p>
    <CodeBlock code={failTest9} />
    <p>Fail</p>
    <CodeBlock code={failTest10} />
    <p>And maybe the most egregious of all, it can't even handle basic falsy
      values.</p>
    <CodeBlock code={failTest11} />
    <h2>JavaScript Without lodash is Wat</h2>
    <div>
      <video
        controls
        src="https://destroyallsoftware-talks.s3.amazonaws.com/wat.mp4?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIKRVCECXBC4ZGHIQ%2F20250510%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20250510T180923Z&X-Amz-Expires=14400&X-Amz-SignedHeaders=host&X-Amz-Signature=ff29cda0680a5a1ae88bf11475e6f6489d93ce9323764472767a4a01651bad05"></video>
    </div>
    <p>If you believe you can actually reproduce lodash get from scratch into a
      single function (lodash itself does not do this), make sure you get all of
      the above cases... and add type safety as @types/lodash does.</p>
    <h2>The Final Results</h2>
    <p>Naive Version: Passes 5 out of 17 tests.
      ({(5 / 17).toLocaleString(undefined, {
        style: "percent"
      })})</p>
    <p>Original Version: Passes 17 out of 17 tests. (100%)</p>
    <div class="w-full relative">
      <Image class="object-contain" src={lodashTest4}
             alt="naive version only passes 5 out of 17 tests" />
    </div>
    <div class="w-full relative">
      <Image class="object-contain" src={lodashTest5}
             alt="original version passes all 17 out of 17 tests" />
    </div>
  </main>
</Layout>