---
import Layout from "../../layouts/Layout.astro";
import CodeBlock from "../../components/CodeBlock.astro";
import "highlight.js/styles/night-owl.css";

const code1 = `
// Example: NaN propagation
let validNumber = 10;
let result = validNumber / 0; // result is Infinity

// If 'result' is then used in further calculations without checks
// and an unexpected non-numeric value is introduced
let anotherResult = result * "hello"; // anotherResult becomes NaN
console.log(anotherResult); // NaN`;

const code2 = `
// Example: Nullish value in a complex abstraction
interface UserProfile {
  id: string;
  contactInfo?: {
    email: string;
    phone?: string;
  };
  preferences?: {
    theme: 'dark' | 'light';
  };
}

// Imagine this function aggregates data from multiple sources
// and might return a partial UserProfile
function getUserProfileFromSources(userId: string): UserProfile {
  // In a real app, this would involve fetching from DB, API, etc.
  // For demonstration, let's simulate a case where contactInfo might be missing
  if (userId === 'user123') {
    return {
      id: 'user123',
      preferences: { theme: 'dark' } // contactInfo is missing
    };
  }
  return {
    id: userId,
    contactInfo: { email: 'test@example.com' }
  };
}

const currentUser = getUserProfileFromSources('user123');

// Later in the application, a component or service might assume contactInfo exists
// for all logged-in users, perhaps after a "default" assignment that wasn't always applied.
// TypeScript might warn, but in a large codebase, such warnings can be overlooked
// or implicitly bypassed by casting or non-null assertions (!).
try {
  // Developer might have assumed contactInfo is always present due to a previous step
  // that was supposed to ensure it, but failed for certain user types/data.
  console.log(currentUser.contactInfo.email); // TypeError: Cannot read properties of undefined (reading 'email')
} catch (e) {
  console.error("Runtime error accessing contact info:", e);
}`;

const code3 = `
// Example: Empty array causing unexpected behavior
function processItems(items: string[]) {
  // Zod might validate items as string[]
  // But if items becomes empty after filtering
  const filteredItems = items.filter(item => item.length > 5); // Could be []

  // This loop won't run, or subsequent logic might fail if it expects at least one item
  filteredItems.forEach(item => console.log(\`Processing $\{item\}\`));

  if (filteredItems.length === 0) {
    console.log("No items to process after filtering.");
  }
}

processItems(["short", "longer_string"]); // "Processing longer_string"
processItems(["short", "tiny"]); // "No items to process after filtering."`;

const code4 = `
// Example: Internal transformation leading to missing property
function transformData(data: { valueA: number; valueB: number; isSpecial: boolean }) {
  // Assume 'data' is initially validated by Zod
  let transformed: any = {};
  transformed.calculatedValue = data.valueA + data.valueB;

  if (data.isSpecial) {
    transformed.specialKey = "extra info";
  }
  // If later code expects 'specialKey' to always exist, it will fail when isSpecial is false
  return transformed;
}

const result = transformData({ valueA: 1, valueB: 2, isSpecial: false });
// If another function tries to use result.specialKey, it will be undefined
// and might cause errors if not checked.
console.log(result.specialKey); // undefined`;

const code5 = `
// Example: Automatic coercion
function calculateTotal(price: number, quantity: number) {
  return price * quantity;
}

let itemPrice = 10;
let itemQuantity: any = "5"; // This might bypass TypeScript if it's from a dynamic source or internal string conversion

// If not explicitly converted, JavaScript might coerce in unexpected ways
let total = calculateTotal(itemPrice, itemQuantity); // 10 * "5" -> 50 (works here, but can be unpredictable)
console.log(total); // 50

itemQuantity = "five";
total = calculateTotal(itemPrice, itemQuantity); // 10 * "five" -> NaN
console.log(total); // NaN, which could then propagate`;

const code6 = `
// Example: Native method throwing on unexpected input
function parseJsonString(jsonString: string) {
  // Assume jsonString is validated by Zod as a string
  // But what if an internal process passes an invalid JSON string?
  try {
    return JSON.parse(jsonString);
  } catch (e) {
    console.error("Failed to parse JSON:", e);
    // Handle gracefully, e.g., return a default object or null
    return null;
  }
}

parseJsonString('{"key": "value"}'); // Works
parseJsonString('invalid json'); // Throws SyntaxError, caught by try/catch`;

const code7 = `
function isString(value: unknown): value is string {
  return typeof value === 'string';
}

function processInput(input: unknown) {
  if (isString(input)) {
    // TypeScript now knows 'input' is a string here
    console.log(input.toUpperCase());
  } else {
    console.error("Input was not a string!");
  }
}
`;

const code8 = `
function isString(value) {
    const type = typeof value;
    return (
        type === 'string' ||
        (type === 'object' &&
            value != null &&
            !Array.isArray(value) &&
            getTag(value) === '[object String]')
    );
}`;

const code9 = `
// Example: Processing a string defensively
function processUserName(name: string | null | undefined): string {
  if (typeof name !== 'string' || name.trim() === '') {
    console.warn("Invalid or empty user name provided. Using default.");
    return "Guest"; // Provide a safe default or throw a specific error
  }
  return name.trim().toUpperCase();
}

console.log(processUserName("  Alice  ")); // "ALICE"
console.log(processUserName(null));       // Warns, "Guest"
console.log(processUserName(undefined));  // Warns, "Guest"
console.log(processUserName(""));         // Warns, "Guest"
console.log(processUserName(123 as any)); // Warns, "Guest" (TypeScript would catch this at compile time if type was strict)`;
---
<Layout title="TypeScript Is An Additional Layer of Protection, Not a Replacement">
    <main class="prose">
        <h1>TypeScript Is An Additional Layer of Protection, Not a Replacement</h1>
        <p>TypeScript is a powerful tool, catching errors early and boosting productivity. When we combine it with
            runtime
            validation libraries like Zod, we often establish robust data contracts at our application boundaries. This
            can
            lead to a common assumption: once data passes these initial checks, it's "safe" and needs no further runtime
            scrutiny. In this post, I'll challenge that notion, exploring the crucial distinction between build-time and
            runtime type checks and emphasizing why comprehensive testing for runtime edge cases remains essential, even
            in
            a meticulously validated TypeScript codebase.</p>
        <h2>Build-Time vs. Runtime Type Checks: A Fundamental Difference</h2>
        <p><strong>Build-time type checks</strong> are TypeScript's domain. They happen during compilation, before our
            code ever runs. TypeScript analyzes our code, inferring types, and flags mismatches based on our
            annotations. If a function expects numbers but gets a string, TypeScript stops us cold, preventing
            compilation until we fix it. This static analysis is incredibly powerful for early bug detection.</p>
        <p>However, remember this critical point: <strong>TypeScript's types are erased</strong> when our code compiles
            to
            plain JavaScript. At runtime, our application executes dynamic JavaScript. TypeScript ensures type safety
            during
            development, but it offers no inherent guarantees about the data our application will encounter live. The
            compiled JavaScript simply runs based on the values present at that moment, stripped of any TypeScript type
            information.</p>
        <h2>The Misconception: "Once Validated, Always Safe"</h2>
        <p>Many developers, especially those using TypeScript with runtime validation libraries like Zod, assume that
            data,
            once validated at entry points (e.g., API requests, form submissions), is perfectly typed and "safe"
            throughout
            its journey. This often leads to the belief that internal functions, having received Zod-validated data, no
            longer need defensive checks.</p>
        <p>This perspective, while understandable, overlooks a crucial reality: <strong>data can become "untyped" or
            unexpectedly malformed <i>after</i> initial validation</strong>. Internal transformations, coercions, or
            complex
            state changes can introduce issues. Even data perfectly valid at the boundary can cause runtime problems if
            our
            internal logic doesn't account for JavaScript's dynamic nature.</p>
        <h2>Why Runtime Edge Cases Matter (Even for "Safe" Data)</h2>
        <p>JavaScript's dynamic nature means that even with TypeScript and initial validation, our code can encounter
            "garbage" data or unexpected states that static checks and initial runtime validators simply can't foresee
            in
            all internal contexts. TypeScript operates on assumptions about our code's structure, and Zod validates a
            snapshot of data. Neither guarantees data integrity throughout its entire lifecycle. Here's how data can
            still
            lead to runtime issues:</p>
        <ul>
            <li><code>NaN</code> <strong>(Not-A-Number):</strong> A numeric field might pass Zod validation, but
                subsequent
                arithmetic (e.g., division by zero, internal string parsing) can introduce <code>NaN</code>. TypeScript
                still sees a
                <code>number</code>, but <code>NaN</code> propagates silently, leading to incorrect results or
                unpredictable
                behavior if unchecked.
                <CodeBlock code={code1}/>
            </li>
            <li><strong>Nullish Values (<code class="!font-normal">null</code>, <code
                    class="!font-normal">undefined</code>):</strong> TypeScript is excellent at identifying optional
                properties (e.g., <code>user.address?</code>). However, in complex systems, <code>null</code> or <code>undefined</code>
                can still appear
                unexpectedly where we might assume a value exists due to prior logic or transformations. This often
                happens as systems scale, and data flows through multiple layers, merges, or default assignments. A
                developer might overlook a potential <code>undefined</code> in a deeply nested or conditionally assigned
                property,
                leading to runtime errors.
                <CodeBlock code={code2}/>
            </li>
            <li><strong>Empty Values:</strong> An array or string might pass Zod validation as present and typed
                correctly, but subsequent filtering, mapping, or string manipulation can result in an empty array
                (<code>[]</code>) or empty string (<code>""</code>). Logic expecting content (e.g., iterating, parsing)
                might break or yield unintended results if these empty values aren't handled in internal functions.
                <CodeBlock code={code3}/>
            </li>
            <li><strong>Unexpected Data Structures from Internal Transformations:</strong> Even with validated external
                data, internal transformations can produce unexpected structures if not meticulously coded. A complex
                aggregation or a function dynamically building objects might, under certain conditions, return an object
                missing a crucial property, or an array where a single object was expected.
                <CodeBlock code={code4}/>
            </li>
            <li><strong>JavaScript's Automatic Coercions:</strong> Despite TypeScript, JavaScript's flexible type
                coercion rules can lead to surprising behavior within our application. If a <code>number</code> is
                implicitly
                concatenated with a <code>string</code> deep in our logic (<code>someNumber + ""</code>), it becomes a
                string. If a subsequent
                function expects a number, this hidden coercion can cause unexpected runtime outcomes not caught by
                static analysis.
                <CodeBlock code={code5}/>
            </li>
            <li><strong>Native Methods with Undocumented Throws:</strong> Many native JavaScript methods can throw
                errors under specific, sometimes poorly documented, conditions. For instance, certain string or array
                methods might throw if called on <code>null</code> or <code>undefined</code>, even if prior code seemed
                to ensure a valid type. TypeScript doesn't predict or prevent these runtime exceptions, making testing
                crucial.
                <CodeBlock code={code6}/>
            </li>
        </ul>
        <p>The notion that our internal code is immune to these issues is a misdirection. If a function, even deep
            within our application, can receive input that causes it to crash or behave unpredictably, it is ultimately
            our responsibility as developers to gracefully handle that input. A robust application anticipates and
            mitigates such scenarios. Real-world examples, like a financial dashboard displaying incorrect calculations
            due to unhandled <code>NaN</code>s introduced during internal data processing, or an e-commerce platform
            failing to
            process orders because of missing object properties after complex data transformations, vividly underscore
            this point. In such scenarios, failures stem not from initial external data validation, but from runtime
            data integrity issues within our application's core logic.</p>
        <h2>Implementing Robust Runtime Checks (Beyond the Boundary)</h2>
        <p>Since TypeScript's static checks are removed at runtime, and initial validation only covers the entry point,
            consciously implementing robust runtime validation within our application becomes essential. This involves
            several practical approaches:</p>
        <ul>
            <li><strong>Leveraging TypeScript's Type Guards and Assertion Functions:</strong> Within our TypeScript
                codebase, we can write custom <a
                        href="https://www.typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates"
                        target="_blank">type guards</a> or <a
                        href="https://www.typescriptlang.org/docs/handbook/2/narrowing.html#assertion-functions"
                        target="_blank">assertion functions</a> to perform runtime checks and inform
                the TypeScript compiler about a variable's type after the check. This allows us to combine dynamic
                runtime safety with static type inference. For example:
                <CodeBlock code={code7}/>
                Or better yet, use lodash which also accounts for new String().
                <CodeBlock code={code8}/>
            </li>
            <li><strong>Adopting Defensive Programming Patterns:</strong> Basic JavaScript checks remain powerful.
                Explicitly check for <code>typeof</code>, <code>instanceof</code>, <code>Array.isArray()</code>, <code>Object.prototype.hasOwnProperty.call()</code>,
                and
                other conditions directly within our functions, especially those that are critical, complex, or highly
                reused. This ensures that even if a value unexpectedly deviates from its expected type or structure, our
                code can handle it gracefully.
                <CodeBlock code={code9}/>
            </li>
        </ul>
        <h2>Strategic Validation: Where and How Much?</h2>
        <p>Where we place runtime validation is crucial. While "entry point validation" — validating data as it first
            enters our application (e.g., at an API gateway, a serverless function handler, or a form submission
            endpoint) — is paramount, it's not the only place to consider.</p>
        <ul>
            <li><strong>Application Boundaries:</strong> This is the primary layer for comprehensive validation using
                schema libraries
                like Zod. Here, we ensure all external inputs meet our application's fundamental data contracts.
            </li>
            <li><strong>Service or Business Logic Layers:</strong> Even after initial validation, data might be
                transformed or composed
                internally. Robust services or core business logic functions, especially those handling critical
                operations or consuming data from multiple internal sources, might include internal defensive checks to
                ensure data integrity.
            </li>
            <li><strong>Utility Functions:</strong> As Lodash demonstrates, generic utility functions benefit immensely
                from being highly defensive. They should be resilient to a wide range of inputs, as they are often
                reused across many contexts and may receive data that has undergone various transformations or subtle
                coercions.
            </li>
        </ul>
        <p>The key is balance. We validate thoroughly at the boundaries of untrusted data, but we also implement
            targeted, defensive checks within core logic and reusable components to ensure their robustness and
            predictable behavior.</p>
        <h2>Testing for Runtime Edge Cases</h2>
        <p>This brings us to the crucial role of runtime testing. While TypeScript ensures our code adheres to its
            defined types during development, and Zod validates at the entry point, tests are needed to verify how our
            code behaves when confronted with data that doesn't conform to those ideal types at runtime within our
            application's internal flow, or when it encounters other unexpected conditions.</p>
        <p>Consider how a robust utility library like lodash approaches this. For a function like <code>get(object,
            path, [defaultValue])</code>, which safely retrieves a value at a given <code>path</code> from
            <code>object</code>, its tests don't just cover the "happy path" where <code>object</code> and
            <code>path</code> are perfectly valid. Instead, lodash's extensive test suite includes scenarios where:</p>
        <ul>
            <li><code>object</code> is <code>null</code>, <code>undefined</code>, a number, a string, or a boolean,
                rather than an object, possibly due to a prior transformation.
            </li>
            <li><code>path</code> is an empty string, an array containing <code>null</code> or <code>undefined</code>
                elements, a non-existent path, or a path that leads to a non-object value where further traversal is
                attempted, even if the initial <code>object</code> was validated.
            </li>
            <li>The function is called with too few or too many arguments.</li>
        </ul>
        <p>These tests reveal how <code>get</code> gracefully handles various invalid inputs, typically returning <code>undefined</code>
            (or the specified <code>defaultValue</code>) rather than throwing an error or crashing the application. This
            meticulous approach to testing for runtime resilience is a hallmark of well-engineered code. Such runtime
            checks, combined with TypeScript's compile-time safety, create a layered defense against errors, ensuring
            our application remains stable even when confronted with imperfect data.</p>
        <p>Furthermore, relying solely on "entry point validation" isn't sufficient for complex applications if internal
            components are brittle. Unit tests that probe these edge cases ensure that individual "units" of code are
            resilient, regardless of where their data originates. Libraries like lodash are prime examples of this
            philosophy, with extensive tests dedicated to covering every conceivable edge case for their utility
            functions.</p>
        <h2>Conclusion</h2>
        <p>TypeScript is an invaluable asset for modern JavaScript development, providing strong type guarantees at
            build time that significantly reduce common programming errors. When combined with powerful runtime
            validation libraries like Zod, it creates a formidable first line of defense. However, this combination is
            not a silver bullet that eliminates the need for further runtime validation and comprehensive testing within
            our application's internal logic. JavaScript's dynamic nature means that unexpected data and edge cases can
            still arise during execution, even with initially "safe" data.</p>
        <p>True engineering involves understanding both the static safety provided by TypeScript and the dynamic
            realities of JavaScript. By embracing robust runtime checks—through TypeScript's type guards, defensive
            programming patterns, and strategic use of validation where data transformations occur—and rigorously
            testing for edge cases, we can build applications that are not only type-safe but also resilient, graceful,
            and truly robust in the face of real-world data. This layered approach leads to <strong>improved user
                experience</strong> by preventing unexpected errors, <strong>easier debugging and maintenance</strong>
            due to predictable behavior, and ultimately, <strong>enhanced system reliability and security</strong>. It's
            about building code that works reliably, even when the "unhappy path" presents itself within our own
            codebase.</p>
    </main>
</Layout>