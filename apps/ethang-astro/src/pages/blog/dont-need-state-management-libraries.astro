---
import "highlight.js/styles/night-owl.css";
import Layout from "../../layouts/Layout.astro";
import CodeBlock from "../../components/CodeBlock.astro";

const headers = {
  introduction: { id: "introduction", label: "Introduction" },
  purposeOfAUiLibrary: {
    id: "purposeOfAUiLibrary",
    label: "The Purpose of a UI Library",
  },
  whatAUiLibraryShouldDo: {
    id: "whatAUiLibraryShouldDo",
    label: "What a UI library SHOULD do",
  },
  whatAUiLibraryShouldntDo: {
    id: "whatAUiLibraryShouldntDo",
    label: "What a UI library should NOT do",
  },
  problemsUiLibraryNeedsToSolve: {
    id: "problemsUiLibraryNeedsToSolve",
    label: "Problems a UI library needs to solve",
  },
  findingASolution: {
    id: "findingASolution",
    label: "Finding A Solution",
  },
};

const simpleStateManager = `
type Observable<T> = {
    subscribe: (callback: () => void) => () => void;
}

class StateManager<T> implements Observable<T> {
    private state: T;
    private subscribers: Set<(newState: T) => void> = new Set();

    constructor(initialState: T) {
        this.state = initialState;
    }

    subscribe(callback: (newState: T) => void) {
        this.subscribers.add(callback);
        return () => this.subscribers.delete(callback);
    }

    update(newState: T) {
        // Optional: Add validation or transformation logic here
        if (this.shouldNotify(newState)) {
            this.state = newState;
            this.notifySubscribers();
        }
    }

    private shouldNotify(newState: T): boolean {
        // Custom logic, if subscribers should be notified
        // For example, deep comparison, specific condition checks
        return true;
    }

    private notifySubscribers() {
        this.subscribers.forEach(subscriber => {
          return subscriber(this.state)
        });
    }
}`;

const errorHandlingExample = `
type Observable<T> = {
    subscribe: (callback: () => void) => () => void;
}

type UserProfile = {
  name: string;
}

class UserProfileStore implements Observable<UserProfile> {
    private state: UserProfile;
    private subscribers: Set<(newState: UserProfile) => void> 
        = new Set();

    constructor(initialState: UserProfile) {
        this.state = initialState;
    }

    subscribe(callback: (newState: UserProfile) => void) {
        this.subscribers.add(callback);
        return () => this.subscribers.delete(callback);
    }

    async updateProfile(updates: Partial<UserProfile>) {
        try {
            const original = this.state;
            const data = await fetch('...', {
                method: 'POST',
                body: JSON.stringify(updates),
            }).then(response => {
                return response.json();
            });

            if (!deepEqual(original, data)) {
                this.update(data);
            }
        } catch (error) {
            toast({
                type: 'error',
                message: error.message,
            })
        }
    }

    update(newState: UserProfile) {
        this.state = newState;
        this.notifySubscribers();
    }

    private notifySubscribers() {
        this.subscribers.forEach(subscriber => {
          return subscriber(this.state)
        });
    }
}`;

const userProfileMarkup = `
const userProfile = new UserProfile();

export const MyUserProfile = () => {
    return <p>{userProfile.name}</p>
}`;

const transformedExample = `
userProfile.subscribe(state => {
    const element = document.getElementById('genId');
    element.textContent = state.name;
})`;

const useSyncExternalStoreExample = `
import {useSyncExternalStore} from "react";

const state = useSyncExternalStore(
    listener => userProfile.subscribe(listener),
    () => userProfile.state,
    () => userProfile.state,
);

<div>{state.name}</div>`;

const useSyncExternalStoreSelectorExample = `
import {useSyncExternalStore} from "react";

const name = useSyncExternalStore(
    listener => userProfile.subscribe(listener),
    () => userProfile.state.name,
    () => userProfile.state.name,
);

<div>{name}</div>`;
---

<Layout
  title="We Don't Need State Management Libraries"
  description="Why developers don't need state management libraries and what they need instead."
>
  <main class="prose">
    <h1>We Don't Need State Management Libraries</h1>
    <nav aria-label="Table Of Contents">
      <h2>Table of Contents</h2>
      <ul>
        <li>
          <a href={`#${headers.introduction.id}`}
            >{headers.introduction.label}</a
          >
        </li>
        <li>
          <a href={`#${headers.purposeOfAUiLibrary.id}`}
            >{headers.purposeOfAUiLibrary.label}</a
          >
          <ul>
            <li>
              <a href={`#${headers.whatAUiLibraryShouldDo.id}`}
                >{headers.whatAUiLibraryShouldDo.label}</a
              >
            </li>
            <li>
              <a href={`#${headers.whatAUiLibraryShouldntDo.id}`}
                >{headers.whatAUiLibraryShouldntDo.label}</a
              >
            </li>
            <li>
              <a href={`#${headers.problemsUiLibraryNeedsToSolve.id}`}
                >{headers.problemsUiLibraryNeedsToSolve.label}</a
              >
            </li>
          </ul>
        </li>
        <li>
          <a href={`#${headers.findingASolution.id}`}
            >{headers.findingASolution.label}</a
          >
        </li>
      </ul>
    </nav>
    <h2 id={headers.introduction.id}>{headers.introduction.label}</h2>
    <p>
      I'm never one to just say, "we should only use vanilla JavaScript and
      never use dependencies." I think this ignores the fact that JavaScript has
      no standard library. And that JavaScript is not a programming language. Or
      to be more specific it falls under the subcategory of scripting language
      while extensions like TypeScript has helped elevate it into proper
      programming. I will always be the first to remind people that in the real
      world you're better off using a
      <a
        href="/blog/javascript-standard-library/"
        >popular prewritten tool as if JavaScript had a standard library</a
      >.
    </p>
    <p>
      However, the more LinkedIn posts I see of people new to these frameworks
      explaining the jargon and complexities of different state management
      libraries, praising Zustand over Redux as Reacts savior, the more
      concerned I am that these tools, which helped the broader community during
      a time of exploration, have lulled us into unnecessary complexity. (Yes,
      even Zustand.)
    </p>
    <p>
      In some sense I feel like Ryan Carniato's exploration of building reactive
      data graphs in SolidJS and <a
        href="https://dev.to/this-is-learning/derivations-in-reactivity-4fo1"
        target="_blank">writing about reactivity</a
      > broke through the matrix. Sure, what SolidJS does as a framework for "state
      management" is quite complex, but it's built upon and discovered a few simple
      primitives. State and Effects. "Derived" values are just memoized state, and
      Effects are just "Derived" values that don't set their own state. AKA, they
      don't return a value.
    </p>
    <p>
      Effects are Derived values that return nothing. Derived values are Effects
      that return something. State is a plain object. Insert memoization where
      appropriate. Not to devalue SolidJS as a framework, but we can do that.
    </p>
    <h2 id={headers.purposeOfAUiLibrary.id}>
      {headers.purposeOfAUiLibrary.label}
    </h2>
    <p>
      One of the key things that makes SolidJS so special, and what has helped
      it be so performant, is that it separates data from UI at a core level.
      While React makes them the same thing. React is composed of JSX objects
      which call functions to build the state of each component. The data it
      uses is mixed into these objects.
    </p>
    <p>
      UI component functions are called when setState is called, a useEffect
      dependency changes, or a prop changes. This then calls all nested
      functions (to include child components). This process is what we call
      "rerendering".
    </p>
    <p>
      Frameworks like SolidJS, Vue, and Angular instead create subscriptions of
      data to HTML. This is why React's performance is so noticeably slower than
      other frameworks, and React developers spend so much time trying to manage
      and stop React from doing what it's built to do, "rerender", as a way to
      get that performance back.
    </p>
    <p>
      Given these realizations, I believe UI libraries should not provide any
      aid to "state management". Nor should we use any library that attempts to
      abstract this out. Instead, UI libraries should <strong
        >provide a mechanism to subscribe HTML to our own state.</strong
      >
      They should not try to abstract away memoization, performance, derivation,
      or "effects".
    </p>
    <p>
      This means as developers all we have to do is implement a subscription
      interface.
    </p>
    <CodeBlock code={simpleStateManager} />
    <p>
      The minimum interface here to be compatible with the framework is
      subscribe to changes, the rest is up to us. When to notify subscribers,
      how to call their callbacks, what to memoize, custom methods, and so on.
    </p>
    <p>
      For example, what if when an update fails, we don't want to "rerender" or
      change the subscribed element, instead we want to leave it in it's current
      state and trigger a toast.
    </p>
    <CodeBlock code={errorHandlingExample} />
    <p>
      Now we've made a few changes. Instead of a generic "update" we have a
      method that is specific to updating a profile. This gives us the context
      to manage the state exactly as we need to. In this case, if the operation
      fails, it simply calls a toast function to trigger a UI toast component.
      We're also using a deepEqual comparison to decide whether or not to notify
      subscribers or "rerender".
    </p>
    <p>
      However we've also introduced a major complexity and weakness of UI
      libraries. An async update. In this case, it is best to reach for that
      library and handle these method calls with <a
        href="https://tanstack.com/query/latest"
        target="_blank">TanStack Query.</a
      >
    </p>
    <p>
      In fact, if we're in React, I would not use the above class at all and use
      only TanStack Query. But the example is only used to illustrate error
      handling.
    </p>
    <p>
      The purpose of this is not to have a magic all-in-one library abstraction
      that "just works." It is to give developers the power to do what they need
      to do. And I think the jargon and complexities of state management
      libraries have stopped solving problems and only introduced fun and
      alluring arbitrary puzzles for newbies.
    </p>
    <p>
      At a UI level, I believe we should not be using things like React hooks
      which call entire component functions and all nested logic. Instead they
      should only provide a way to subscribe a piece of markup to a store.
    </p>
    <p>This bit of markup:</p>
    <CodeBlock code={userProfileMarkup} />
    <p>Need only transform into this:</p>
    <CodeBlock code={transformedExample} />
    <p>
      Aha! And now we see the problem! <strong
        >It is not state management that's hard, it is the transformation of
        declarative code to imperative JavaScript and HTML.</strong
      >
    </p>
    <p>
      How do we generate ids? How do we manage unsubscription? How do we know to
      change textContent and not innerHTML with composition? How do we handle
      component composition and component driven design at all?
    </p>
    <p>
      With React, all we need is <a
        href="https://react.dev/reference/react/useSyncExternalStore"
        target="_blank">useSyncExternalStore</a
      >.
    </p>
    <CodeBlock code={useSyncExternalStoreExample} />
    <p>
      The only issue with useSyncExternalStore is that it's a hook and therefore
      will call the component function (rerender) everytime state changes. React
      would rather you call component functions on every state change wherever
      this hook is used ("rerender") than to allow you to at the very least make
      sure it only happens when the property name changes. Selectors may be used
      with <a
        href="https://www.npmjs.com/package/use-sync-external-store"
        target="_blank">a shim</a
      > that they maintain for "legacy purposes".
    </p>
    <p>
      Every solution to React rerendering too much revolves around massaging
      explicit selectors, generating specific subscriptions, attaching
      subscriptions to refs (in the case of form libraries), using proxies for
      property detection, and a whole host of other trickeries hidden away and
      out of the app developers control. <strong
        >All of these solutions, by the way, are of equal mediocrity due to
        their generic nature and the fact that they are built on top of hacking
        or "fixing" React's render process.</strong
      >
    </p>
    <p>
      React's official answer to all of this is to just memoize. Their affinity
      towards component wrappers (Suspense, ErrorBoundary, Context, memo, etc.)
      have never been great DX and the hacks provided by the libraries that are
      attempting to introduce simple Observer patterns to React still just work
      better than any official solution.
    </p>
    <p>
      This is something I don't understand about React, why they are so against
      fine-grained reactivity. I believe this is one of the few purposes of a UI
      library. Provide the transformations to declaratively define
      subscriptions. Allow app developers to maintain the logic for notification
      of subscribers and what each subscriber should do with notifications.
    </p>
    <p>
      SolidJS is fantastic, but the interfaces aren't quite so open. While data
      is separated from UI, we still have to go through Solid mechanisms and
      jargon to get to the results we want.
    </p>
    <p>
      But to get the patterns shown above we need some form of "SPA." Whether
      the HTML is pre rendered or not is unimportant, we need an entrypoint.
      Frameworks like Astro often feel liberating as it allows us to get "closer
      to vanilla". But this is generally a feeling that doesn't map to reality.
      Creating a global store, managing id's and reactivity just doesn't work
      well in the long run with Astro's island style architecture.
    </p>
    <p>
      That's a lot to think about. So let's at least list out what a UI library
      should do and shouldn't do.
    </p>
    <h3 id={headers.whatAUiLibraryShouldDo.id}>
      {headers.whatAUiLibraryShouldDo.label}
    </h3>
    <ul>
      <li>
        Provide a way to template HTML in composable/reusable pieces (known as
        components).
      </li>
      <li>Provide a way to subscribe template variables to state changes.</li>
      <li>Handle the differences between sync and async updates.</li>
    </ul>
    <h3 id={headers.whatAUiLibraryShouldntDo.id}>
      {headers.whatAUiLibraryShouldntDo.label}
    </h3>
    <ul>
      <li>
        Bake in opinions about whether all state should be "fine-grained" or
        "coarse-grained".
      </li>
      <li>Block modern declarative patterns.</li>
      <li>
        Bake in architectural opinions about design patterns. (SSR, HATEOS,
        etc.)
      </li>
      <li>
        Necessitate an entire ecosystem of "state managers" all looking to solve
        problems with the UI library.
      </li>
    </ul>
    <h3 id={headers.problemsUiLibraryNeedsToSolve.id}>
      {headers.problemsUiLibraryNeedsToSolve.label}
    </h3>
    <ul>
      <li>Unique element id generation</li>
      <li>Interfacing with external state subscription/unsubscription</li>
      <li>Composition (templates/components)</li>
      <li>
        Knowing what needs to change (textContent, nested
        HTML/templates/components, properties, CSS)
      </li>
      <li>
        Allow users to control whether to render at build time (SSG), request
        time (SSR), or runtime (CSR).
      </li>
    </ul>
    <h2 id={headers.findingASolution.id}>
      {headers.findingASolution.label}
    </h2>
    <p>
      Let's think about this practically. We don't want React which builds large
      objects of recursive functions and a hard to control process. We don't
      want Astro which purposefully doesn't provide the mechanisms for SPA logic
      and instead opts to build multiple HTML entry points. We don't want HTMX
      which doesn't allow for any sort of templating and is instead just a
      simple utility library (I would say it is not a UI library at all).
      SolidJS is great, but we want to simplify and think more about using
      generic logic which plugs into the framework, not a framework which
      necessitates world building and its own ecosystem.
    </p>
    <p>
      I've been down this rabbit hole too many times to count. In the real
      world, it's best to just use React useSyncExternalStore and throw away any
      state management dependencies minus TanStack Query.
    </p>
    <p>
      If we were to prototype out a solution we could start with Vite/vanilla to
      ensure we've got a blank canvas with modern bundling. Where do you start
      from there? You might start with brainstorming an imperative Todo app. But
      you'll very quickly run into the issue of templating your components. (The
      hard part.)
    </p>
    <p>
      Maybe you would consider EJS style templating, but it's still a lot of
      imperative code. Maybe you would go down a web components rabbit hole only
      to find that web components are hardly components at all. At least they do
      not meet the requirements of what we know of components today. They do not
      solve any problem.
    </p>
    <p>
      So the answer is more likely a DSL similar to Angular or Svelte. You just
      need an interface for subscriptions rather than your UI library managing
      it all and locking people into your opinions. I would want to avoid
      solving problems like routing as well. Instead I'd want a routing library
      to point to my libraries components.
    </p>
    <p>
      And here we have the crux of the matter. Why UI libraries quickly turn
      into "frameworks", and why we have so many choices. For simple declarative
      and reactive templating, so many hurdles very quickly jump in the way
      before you've even thought of an approach to prototype.
    </p>

    <p class="mt-8">
      For more on my approach to React and state management, check out my 
      <a href="/blog/how-i-code#letsTalkAboutReact">Let's Talk About React</a>
      section in my <a href="/blog/how-i-code">How I Code</a> guide, where I discuss React's strengths and limitations.
    </p>
  </main>
</Layout>
