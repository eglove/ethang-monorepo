---
import type { ImageMetadata } from "astro";
import LocalImage from "./LocalImage.astro";
type Props = {
  image?: {
    alt: string;
    src: ImageMetadata;
    imgClass?: string;
    loading?: "eager" | "lazy";
  };
};

const { image } = Astro.props;
---

<Fragment>
  <script>
    const formatter = Intl.NumberFormat(undefined);

    const calculate = () => {
      const mainElement = document.querySelector("main.prose");

      if (mainElement) {
        const textContent = mainElement.innerHTML.replace(/<[^>]*>/g, " ");
        const words = textContent
          .split(/\s+/)
          .filter((word) => word.length > 0);
        const wordCount = words.length;

        const readTimeMinutes = Math.ceil(wordCount / 225);

        const wordCountElement = document.querySelector(".word-count-display");
        if (wordCountElement) {
          wordCountElement.textContent = `${formatter.format(wordCount)} words Â· ${readTimeMinutes} min read`;
        }
      }
    };

    document.addEventListener("DOMContentLoaded", calculate);
    document.addEventListener("animationend", calculate);
  </script>

  <script type="module">
    try {
      const tableOfContents = document.querySelector("#toc");
      const rootUl = document.createElement("ul");

      const getSiblingHeadings = (parent) => {
        const childHeadings = [];
        const parentLevel = Number(parent.tagName.substring(1));
        let nextElement = parent.nextElementSibling;

        while (nextElement) {
          const tagName = nextElement.tagName;
          if (tagName.startsWith("H") && tagName.length === 2) {
            const nextLevel = Number(tagName.substring(1));
            if (nextLevel === parentLevel + 1) {
              childHeadings.push(nextElement);
            } else if (nextLevel <= parentLevel) {
              break;
            }
          }
          nextElement = nextElement.nextElementSibling;
        }

        return childHeadings;
      };

      const buildToc = (headings, parentList) => {
        headings.forEach((heading) => {
          const li = document.createElement("li");
          const link = document.createElement("a");

          let id = (heading.textContent || "")
            .trim()
            .toLowerCase()
            .replace(/[^a-zA-Z0-9]/g, "");
          let uniqueId = id;
          let counter = 1;

          while (document.getElementById(uniqueId)) {
            uniqueId = `${id}-${counter}`;
            counter += 1;
          }

          heading.id = uniqueId;
          link.href = `#${uniqueId}`;
          link.textContent = heading.textContent;
          li.appendChild(link);
          parentList.appendChild(li);

          const childHeadings = getSiblingHeadings(heading);

          if (childHeadings.length > 0) {
            const nestedUl = document.createElement("ul");
            li.appendChild(nestedUl);
            buildToc(childHeadings, nestedUl);
          }
        });
      };

      tableOfContents.appendChild(rootUl);

      const topHeadings = document.querySelectorAll("h2");

      if (topHeadings.length > 0) {
        buildToc(topHeadings, rootUl);
      }

      tableOfContents.classList.remove("hidden");
    } catch (error) {
      console.log(error);
    }
  </script>

  <p class="text-sm text-gray-500 mb-4 word-count-display">Calculating...</p>
  {image && <LocalImage {...image} loading="eager" />}
  <div id="toc" class="hidden"></div>
</Fragment>
