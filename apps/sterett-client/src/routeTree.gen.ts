/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TrusteesRouteImport } from './routes/trustees'
import { Route as NewsRouteImport } from './routes/news'
import { Route as GalleryRouteImport } from './routes/gallery'
import { Route as FilesRouteImport } from './routes/files'
import { Route as CalendarRouteImport } from './routes/calendar'
import { Route as BeyonderRouteImport } from './routes/beyonder'
import { Route as AdminRouteImport } from './routes/admin'
import { Route as IndexRouteImport } from './routes/index'
import { Route as PageIndexRouteImport } from './routes/page/index'
import { Route as PageIdRouteImport } from './routes/page/$id'

const TrusteesRoute = TrusteesRouteImport.update({
  id: '/trustees',
  path: '/trustees',
  getParentRoute: () => rootRouteImport,
} as any)
const NewsRoute = NewsRouteImport.update({
  id: '/news',
  path: '/news',
  getParentRoute: () => rootRouteImport,
} as any)
const GalleryRoute = GalleryRouteImport.update({
  id: '/gallery',
  path: '/gallery',
  getParentRoute: () => rootRouteImport,
} as any)
const FilesRoute = FilesRouteImport.update({
  id: '/files',
  path: '/files',
  getParentRoute: () => rootRouteImport,
} as any)
const CalendarRoute = CalendarRouteImport.update({
  id: '/calendar',
  path: '/calendar',
  getParentRoute: () => rootRouteImport,
} as any)
const BeyonderRoute = BeyonderRouteImport.update({
  id: '/beyonder',
  path: '/beyonder',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PageIndexRoute = PageIndexRouteImport.update({
  id: '/page/',
  path: '/page/',
  getParentRoute: () => rootRouteImport,
} as any)
const PageIdRoute = PageIdRouteImport.update({
  id: '/page/$id',
  path: '/page/$id',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRoute
  '/beyonder': typeof BeyonderRoute
  '/calendar': typeof CalendarRoute
  '/files': typeof FilesRoute
  '/gallery': typeof GalleryRoute
  '/news': typeof NewsRoute
  '/trustees': typeof TrusteesRoute
  '/page/$id': typeof PageIdRoute
  '/page': typeof PageIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/admin': typeof AdminRoute
  '/beyonder': typeof BeyonderRoute
  '/calendar': typeof CalendarRoute
  '/files': typeof FilesRoute
  '/gallery': typeof GalleryRoute
  '/news': typeof NewsRoute
  '/trustees': typeof TrusteesRoute
  '/page/$id': typeof PageIdRoute
  '/page': typeof PageIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/admin': typeof AdminRoute
  '/beyonder': typeof BeyonderRoute
  '/calendar': typeof CalendarRoute
  '/files': typeof FilesRoute
  '/gallery': typeof GalleryRoute
  '/news': typeof NewsRoute
  '/trustees': typeof TrusteesRoute
  '/page/$id': typeof PageIdRoute
  '/page/': typeof PageIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/beyonder'
    | '/calendar'
    | '/files'
    | '/gallery'
    | '/news'
    | '/trustees'
    | '/page/$id'
    | '/page'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/admin'
    | '/beyonder'
    | '/calendar'
    | '/files'
    | '/gallery'
    | '/news'
    | '/trustees'
    | '/page/$id'
    | '/page'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/beyonder'
    | '/calendar'
    | '/files'
    | '/gallery'
    | '/news'
    | '/trustees'
    | '/page/$id'
    | '/page/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRoute: typeof AdminRoute
  BeyonderRoute: typeof BeyonderRoute
  CalendarRoute: typeof CalendarRoute
  FilesRoute: typeof FilesRoute
  GalleryRoute: typeof GalleryRoute
  NewsRoute: typeof NewsRoute
  TrusteesRoute: typeof TrusteesRoute
  PageIdRoute: typeof PageIdRoute
  PageIndexRoute: typeof PageIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/trustees': {
      id: '/trustees'
      path: '/trustees'
      fullPath: '/trustees'
      preLoaderRoute: typeof TrusteesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/news': {
      id: '/news'
      path: '/news'
      fullPath: '/news'
      preLoaderRoute: typeof NewsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/gallery': {
      id: '/gallery'
      path: '/gallery'
      fullPath: '/gallery'
      preLoaderRoute: typeof GalleryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/files': {
      id: '/files'
      path: '/files'
      fullPath: '/files'
      preLoaderRoute: typeof FilesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/calendar': {
      id: '/calendar'
      path: '/calendar'
      fullPath: '/calendar'
      preLoaderRoute: typeof CalendarRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/beyonder': {
      id: '/beyonder'
      path: '/beyonder'
      fullPath: '/beyonder'
      preLoaderRoute: typeof BeyonderRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/page/': {
      id: '/page/'
      path: '/page'
      fullPath: '/page'
      preLoaderRoute: typeof PageIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/page/$id': {
      id: '/page/$id'
      path: '/page/$id'
      fullPath: '/page/$id'
      preLoaderRoute: typeof PageIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRoute: AdminRoute,
  BeyonderRoute: BeyonderRoute,
  CalendarRoute: CalendarRoute,
  FilesRoute: FilesRoute,
  GalleryRoute: GalleryRoute,
  NewsRoute: NewsRoute,
  TrusteesRoute: TrusteesRoute,
  PageIdRoute: PageIdRoute,
  PageIndexRoute: PageIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
