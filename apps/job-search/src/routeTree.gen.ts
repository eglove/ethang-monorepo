/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as UpsertApplicationImport } from './routes/upsert-application'
import { Route as StatsImport } from './routes/stats'
import { Route as ImportDataImport } from './routes/import-data'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const UpsertApplicationRoute = UpsertApplicationImport.update({
  id: '/upsert-application',
  path: '/upsert-application',
  getParentRoute: () => rootRoute,
} as any)

const StatsRoute = StatsImport.update({
  id: '/stats',
  path: '/stats',
  getParentRoute: () => rootRoute,
} as any)

const ImportDataRoute = ImportDataImport.update({
  id: '/import-data',
  path: '/import-data',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/import-data': {
      id: '/import-data'
      path: '/import-data'
      fullPath: '/import-data'
      preLoaderRoute: typeof ImportDataImport
      parentRoute: typeof rootRoute
    }
    '/stats': {
      id: '/stats'
      path: '/stats'
      fullPath: '/stats'
      preLoaderRoute: typeof StatsImport
      parentRoute: typeof rootRoute
    }
    '/upsert-application': {
      id: '/upsert-application'
      path: '/upsert-application'
      fullPath: '/upsert-application'
      preLoaderRoute: typeof UpsertApplicationImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/import-data': typeof ImportDataRoute
  '/stats': typeof StatsRoute
  '/upsert-application': typeof UpsertApplicationRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/import-data': typeof ImportDataRoute
  '/stats': typeof StatsRoute
  '/upsert-application': typeof UpsertApplicationRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/import-data': typeof ImportDataRoute
  '/stats': typeof StatsRoute
  '/upsert-application': typeof UpsertApplicationRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/import-data' | '/stats' | '/upsert-application'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/import-data' | '/stats' | '/upsert-application'
  id: '__root__' | '/' | '/import-data' | '/stats' | '/upsert-application'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ImportDataRoute: typeof ImportDataRoute
  StatsRoute: typeof StatsRoute
  UpsertApplicationRoute: typeof UpsertApplicationRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ImportDataRoute: ImportDataRoute,
  StatsRoute: StatsRoute,
  UpsertApplicationRoute: UpsertApplicationRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/import-data",
        "/stats",
        "/upsert-application"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/import-data": {
      "filePath": "import-data.tsx"
    },
    "/stats": {
      "filePath": "stats.tsx"
    },
    "/upsert-application": {
      "filePath": "upsert-application.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
