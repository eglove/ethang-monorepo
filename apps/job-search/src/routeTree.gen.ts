/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as StatsImport } from './routes/stats'
import { Route as QaImport } from './routes/qa'
import { Route as DataBackupImport } from './routes/data-backup'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const StatsRoute = StatsImport.update({
  id: '/stats',
  path: '/stats',
  getParentRoute: () => rootRoute,
} as any)

const QaRoute = QaImport.update({
  id: '/qa',
  path: '/qa',
  getParentRoute: () => rootRoute,
} as any)

const DataBackupRoute = DataBackupImport.update({
  id: '/data-backup',
  path: '/data-backup',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/data-backup': {
      id: '/data-backup'
      path: '/data-backup'
      fullPath: '/data-backup'
      preLoaderRoute: typeof DataBackupImport
      parentRoute: typeof rootRoute
    }
    '/qa': {
      id: '/qa'
      path: '/qa'
      fullPath: '/qa'
      preLoaderRoute: typeof QaImport
      parentRoute: typeof rootRoute
    }
    '/stats': {
      id: '/stats'
      path: '/stats'
      fullPath: '/stats'
      preLoaderRoute: typeof StatsImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/data-backup': typeof DataBackupRoute
  '/qa': typeof QaRoute
  '/stats': typeof StatsRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/data-backup': typeof DataBackupRoute
  '/qa': typeof QaRoute
  '/stats': typeof StatsRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/data-backup': typeof DataBackupRoute
  '/qa': typeof QaRoute
  '/stats': typeof StatsRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/data-backup' | '/qa' | '/stats'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/data-backup' | '/qa' | '/stats'
  id: '__root__' | '/' | '/data-backup' | '/qa' | '/stats'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DataBackupRoute: typeof DataBackupRoute
  QaRoute: typeof QaRoute
  StatsRoute: typeof StatsRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DataBackupRoute: DataBackupRoute,
  QaRoute: QaRoute,
  StatsRoute: StatsRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/data-backup",
        "/qa",
        "/stats"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/data-backup": {
      "filePath": "data-backup.tsx"
    },
    "/qa": {
      "filePath": "qa.tsx"
    },
    "/stats": {
      "filePath": "stats.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
